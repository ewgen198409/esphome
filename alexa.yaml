substitutions:
  media_player_entity: "media_player.chromepc"

esphome:
  name: alexa

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
  # framework:
  #   type: esp-idf
  #   version: 4.4.8
  #   platform_version: 5.4.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "c+M3yRoST8qnH2fFAmCj9SJ3ZdECgc8o5/cZEGsKWBg="

ota:
  - platform: esphome
    password: "312f283a0164fce9b713ecd13a3cf624"

wifi:
  networks:
    - ssid: "IoT_Office"
      password: "9514210798"
    - ssid: "OpenWrt_Garage"
      password: "9514210798"

  fast_connect: false
  power_save_mode: none
  on_connect:
    then:
      - if:
          condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
            switch.is_on: rtttl_mute_switch
          then:
            - rtttl.play: 'wifi_connect:d=16,o=6,b=100:e,g'
      - lambda: |-
          id(led_ww).turn_on().set_brightness(1.0).set_rgb(1.0, 1.0, 0).set_effect("scan").perform();
      - delay: 2s
      - lambda: |-
          id(led_ww).turn_off().perform();

deep_sleep:
  id: deep_sleep_1
  wakeup_pin:
    number: 5
    allow_other_uses: true
  wakeup_pin_mode: KEEP_AWAKE

output:
  - platform: ledc
    pin: GPIO10
    inverted: false
    id: rtttl_out

  
rtttl:
  output: rtttl_out


i2s_audio:
  i2s_lrclk_pin: GPIO3   #WS/LRC
  i2s_bclk_pin: GPIO2    #SCK/BCLK

microphone:
  - platform: i2s_audio
    id: esp32_microphone
    i2s_din_pin: GPIO4    #SD
    adc_type: external
    pdm: false
    channel: left
    bits_per_sample: 32bit
    bits_per_channel: 32bit
    sample_rate: 16000

speaker:
  - platform: i2s_audio
    id: esp32_mplayer
    dac_type: external
    i2s_mode: primary
    buffer_duration: 1s
    i2s_dout_pin: GPIO8     #DIN

# media_player:
#   - platform: speaker
#     name: "Speaker Media Player"
#     id: speaker_media_player_id
#     announcement_pipeline:
#         speaker: esp32_mplayer
#         num_channels: 1
#         format: WAV


# micro_wake_word:
#   microphone: esp32_microphone 
#   stop_after_detection: true
#   models:
#     - id: alexa_model
#       model: github://esphome/micro-wake-word-models/models/v2/alexa.json
#       probability_cutoff: 0.6
#   vad:
#     model: github://esphome/micro-wake-word-models/models/v2/vad.json
#   on_wake_word_detected:
#     then:
#       - if:
#           condition:
#               # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
#             switch.is_on: rtttl_mute_switch
#           then:
#             - rtttl.play: 'short_scale_up:d=32,o=5,b=100:c,d,e,f,g'
#       # Запускаем голосовой помощник после обнаружения ключевого слова
#       - voice_assistant.start:
#           wake_word: !lambda return wake_word;


voice_assistant:
  id: assist
  microphone: esp32_microphone
  speaker: esp32_mplayer
  use_wake_word: true
  noise_suppression_level: 2    #2
  auto_gain: 20dBFS             #31dBFS
  volume_multiplier: 7.0        #2.5
  on_wake_word_detected:
    then:
      - if:
          condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
            switch.is_on: rtttl_mute_switch
          then:
            - rtttl.play: 'short_scale_up:d=32,o=5,b=100:c,d,e,f,g'

  on_tts_stream_start:
    - lambda: |-
        id(led_ww).turn_on().set_brightness(1.0).set_rgb(0, 1.0, 0).set_effect("scan").perform();
  
  on_tts_stream_end:
    - lambda: |-
        id(led_ww).turn_off().perform();

  on_tts_end:
    - if:
        condition:
          switch.is_on: use_voice_speack
        then:
          - speaker.mute_on: esp32_mplayer
          - homeassistant.service:
              service: media_player.play_media
              data:
                media_content_id: !lambda 'return x;'
                media_content_type: audio/mpeg
                entity_id: "${media_player_entity}"

  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous

  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop

  on_end:
    - if:
        condition:
          switch.is_off: use_voice_speack
        then:
          speaker.mute_off: esp32_mplayer

  on_listening:
    - light.turn_on:
        id: led_ww           
        effect: "Smooth Center Pulse" 

  on_error:
    - rtttl.play: 'error_signal:d=16,o=5,b=100:c#,c,b_4'
    - lambda: |-
        id(led_ww).turn_on().set_brightness(1.0).set_rgb(1.0, 0, 0).set_effect("scan").perform();
    - delay: 3s
    - lambda: |-
        id(led_ww).turn_off().perform();

  on_timer_started:
    then:
      # Action to perform when a timer starts (e.g., play a sound, turn on a light)
      - rtttl.play: 'short_scale_up:d=32,o=5,b=100:e,g,c6' # Example: play a short tone

  on_timer_finished:
    then:
      # Action to perform when a timer finishes (e.g., play an alarm, announce the timer name)
      - rtttl.play: 'alarm:d=16,o=5,b=100:c6,g,c6,g,c6,g' # Example: play an alarm sound

  on_timer_tick:
    then:
      # Action to perform every second while timers are active
      # You can use this to update a display, or for subtle feedback
      - lambda: |-
          // Example: print remaining time for all active timers
          for (auto& timer : timers) {
            ESP_LOGV("timer", "Timer '%s' remaining: %d seconds", timer.name().c_str(), timer.remaining_seconds());
          }

binary_sensor:
  # Кнопка "Гровкость выше"
  - platform: gpio
    pin:
      number: GPIO7
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 1"
    internal: true
    on_click: # This will trigger immediately when the button is pressed
      then:
        - if:
            condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c' # Play the button click sound
    on_multi_click:
      # one click
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
        - lambda: |-
            auto vol = id(esp32_mplayer).get_volume();
            if (vol < 1.0) {
              id(esp32_mplayer).set_volume(vol + 0.1);
            }
        # устанавливаем ползунок громкости
        - lambda: |-
            auto volind = id(volume_level_in).make_call();
            volind.set_value(id(esp32_mplayer).get_volume() * 100);
            volind.perform();
        # Скрипт светодиодов
        - script.execute: control_leds_dial_touched

  # Кнопка "Вызов"
  - platform: gpio
    pin:
      number: GPIO6
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 2"
    internal: true
    on_click: # This will trigger immediately when the button is pressed
      then:
        - if:
            condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c' # Play the button click sound
    on_multi_click:
      # one click
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
          - if:
              condition:
                lambda: return id(use_wake_word).state;                // если use wake word включен
              then:                                                    # тогда сигнал ошибки
                - delay: 0.5s
                - lambda: |-
                    auto call = id(led_ww).make_call();
                    call.set_state(true);  // важно — явно включить
                    call.set_rgb(1.0, 0.0, 0.0);
                    call.set_brightness(0.6);
                    call.set_effect("fast pulse");
                    call.perform();

                - rtttl.play: 'error_signal:d=16,o=5,b=100:c#,c,b_4'
                - delay: 2s
                - lambda: |-
                    id(led_ww).turn_off().perform();
              else:                                                        # если слово пробуждения выключено
                - rtttl.play: 'short_scale_up:d=32,o=5,b=100:c,d,e,f,g'
                - delay: 1s
                - voice_assistant.start                                    # тогда вызываем voice assistant
                - lambda: |-
                    auto call = id(led_ww).make_call();
                    call.set_state(true);  // важно — явно включить
                    call.set_rgb(0.3, 0.3, 0.7);
                    call.set_brightness(0.6);
                    call.set_effect("fast pulse");
                    call.perform();
                    
      # long press    
      - timing:
          - ON for at least 3s
        then:
          - switch.toggle: use_wake_word


  # кнопка выкл
  - platform: gpio
    pin:
      number: GPIO5
      allow_other_uses: true
      inverted: false
      mode:
        input: true
        pulldown: true
    name: "Button 3"
    internal: true
    on_click: # This will trigger immediately when the button is pressed
      then:
        - if:
            condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c' # Play the button click sound
    on_multi_click:
      # long press    
      - timing:
          - ON for at least 3s
        then:
          - rtttl.play: 'scale_down:d=32,o=5,b=100:g,f,e,d,c'
          - delay: 2s
          - deep_sleep.enter: deep_sleep_1



  # Кнопка "Гровкость ниже"
  - platform: gpio
    pin:
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 4"
    internal: true
    on_click: # This will trigger immediately when the button is pressed
      then:
        - if:
            condition:
              # Проверяем, что переключатель "rtttl_mute_switch" находится во включенном состоянии
              switch.is_on: rtttl_mute_switch
            then:
              rtttl.play: 'button_click:d=32,o=6,b=100:c' # Play the button click sound

    on_multi_click:
      # one click
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
        - lambda: |-
            auto vol = id(esp32_mplayer).get_volume();
            if (vol > 0.0) {
              id(esp32_mplayer).set_volume(vol - 0.1);
            }
        # устанавливаем ползунок громкости
        - lambda: |-
            auto volind = id(volume_level_in).make_call();
            volind.set_value(id(esp32_mplayer).get_volume() * 100);
            volind.perform();
        # Скрипт светодиодов
        - script.execute: control_leds_dial_touched

light:
  - platform: esp32_rmt_led_strip
    id: led_ww
    rgb_order: GRB
    pin: GPIO1
    num_leds: 4
    rmt_symbols: 48
    use_psram: false
    chipset: ws2812
    name: "on board light"
    effects:
      - addressable_color_wipe:
          name: "color wipe"
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - addressable_scan:
          name: "scan"
      - addressable_lambda:
          name: "Smooth Center Pulse"
          update_interval: 50ms
          lambda: |-
            // Функция преобразования логического индекса в физический
            // Текущий порядок: 2143, нужный порядок: 3421
            auto logical_to_physical = [](int logical_idx) -> int {
              switch (logical_idx) {
                case 0: return 3; // Логический 1 (центр левый) -> Физический 3
                case 1: return 2; // Логический 2 (центр правый) -> Физический 2
                case 2: return 0; // Логический 3 (край левый) -> Физический 0
                case 3: return 1; // Логический 4 (край правый) -> Физический 1
                default: return logical_idx;
              }
            };

            // Период пульсации в миллисекундах (1 секунда полный цикл)
            const int pulse_period = 1000;
            
            // Цикл смены цветов (3 секунды - по 1 секунде на каждый цвет)
            const int color_cycle_period = 3000;
            
            // Определяем текущий цвет на основе времени
            int color_phase = (millis() / pulse_period) % 3;
            Color effect_color;
            switch (color_phase) {
              case 0: effect_color = Color(0, 0, 255);     break; // Синий
              case 1: effect_color = Color(0, 255, 0);     break; // Зеленый  
              case 2: effect_color = Color(255, 255, 0);   break; // Желтый
              default: effect_color = Color(0, 0, 255);    break; // Синий по умолчанию
            }
            
            // Получаем текущее время в цикле (0-1999 мс)
            int time_in_cycle = millis() % pulse_period;
            
            // Преобразуем в значение от 0 до 1 для синуса
            float phase = (float)time_in_cycle * 2.0f * 3.14159f / (float)pulse_period;
            
            // Базовая яркость (синусоида от 0.1 до 1.0)
            float base_brightness = 0.1f + 0.9f * (sin(phase) + 1.0f) / 2.0f;
            
            // Задержка между центром и краями (в радианах)
            const float delay_offset = 3.14159f / 4.0f; // 45 градусов задержки
            
            // Сначала сбрасываем все светодиоды
            for (int i = 0; i < 4; i++) {
              it[i] = Color::BLACK;
            }
            
            // Центральные светодиоды (логические индексы 0 и 1)
            for (int logical_idx = 0; logical_idx < 2; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              float brightness = base_brightness;
              
              // Ограничиваем яркость от 0.1 до 1.0
              brightness = max(0.1f, min(1.0f, brightness));
              
              it[physical_idx] = Color(
                (uint8_t)(effect_color.r * brightness),
                (uint8_t)(effect_color.g * brightness),
                (uint8_t)(effect_color.b * brightness)
              );
            }
            
            // Крайние светодиоды (логические индексы 2 и 3) с задержкой
            for (int logical_idx = 2; logical_idx < 4; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              
              // Фаза с задержкой для крайних светодиодов
              float delayed_phase = phase - delay_offset;
              float brightness = 0.1f + 0.9f * (sin(delayed_phase) + 1.0f) / 2.0f;
              
              // Ограничиваем яркость от 0.1 до 1.0
              brightness = max(0.1f, min(1.0f, brightness));
              
              it[physical_idx] = Color(
                (uint8_t)(effect_color.r * brightness),
                (uint8_t)(effect_color.g * brightness),
                (uint8_t)(effect_color.b * brightness)
              );
            }

      - addressable_lambda:
          name: "Volume Display"
          update_interval: 30ms
          lambda: |-
            // Статические переменные для сохранения состояния между вызовами
            static float smoothed_volume = 0.0f;
            static float target_volume = 0.0f;
            static uint32_t last_update_time = 0;
            static float fade_positions[4] = {0.0f, 0.0f, 0.0f, 0.0f};
            static bool first_run = true;
            
            uint32_t current_time = millis();
            
            // Инициализация при первом запуске
            if (first_run) {
              last_update_time = current_time;
              first_run = false;
              smoothed_volume = id(esp32_mplayer).get_volume();
            }
            
            float delta_time = (current_time - last_update_time) / 1000.0f; // в секундах
            last_update_time = current_time;
            
            // Ограничиваем delta_time для стабильности
            if (delta_time > 0.1f) delta_time = 0.1f;
            
            // Получаем текущее значение громкости
            float volume = id(esp32_mplayer).get_volume();
            target_volume = volume;
            
            // Плавное изменение громкости (сглаживание)
            float smoothing_factor = 12.0f; // Увеличена скорость сглаживания
            smoothed_volume += (target_volume - smoothed_volume) * smoothing_factor * delta_time;
            
            // Ограничиваем значение
            if (smoothed_volume < 0.0f) smoothed_volume = 0.0f;
            if (smoothed_volume > 1.0f) smoothed_volume = 1.0f;

            // Улучшенные цвета для лучшего восприятия
            Color blue_color(30, 144, 255);    // Dodger Blue
            Color green_color(50, 205, 50);    // Lime Green  
            Color orange_color(255, 165, 0);   // Orange
            Color red_color(220, 20, 60);      // Crimson
            Color purple_color(138, 43, 226);  // Blue Violet

            // Функция преобразования логического индекса в физический
            auto logical_to_physical = [](int logical_idx) -> int {
              switch (logical_idx) {
                case 0: return 3;
                case 1: return 2;
                case 2: return 0;
                case 3: return 1;
                default: return logical_idx;
              }
            };
            
            // Функция плавного перехода между цветами
            auto lerp_color = [](const Color& a, const Color& b, float t) -> Color {
              t = std::max(0.0f, std::min(1.0f, t));
              return Color(
                (uint8_t)(a.r + (b.r - a.r) * t),
                (uint8_t)(a.g + (b.g - a.g) * t),
                (uint8_t)(a.b + (b.b - a.b) * t)
              );
            };
            
            // Функция получения цвета по уровню громкости с плавными переходами
            auto get_volume_color = [&](float vol) -> Color {
              if (vol <= 0.0f) {
                return Color::BLACK;
              } else if (vol <= 0.25f) {
                float t = vol / 0.25f;
                return lerp_color(blue_color, green_color, t * 0.8f + 0.2f); // Добавляем базовую интенсивность
              } else if (vol <= 0.5f) {
                float t = (vol - 0.25f) / 0.25f;
                return lerp_color(green_color, orange_color, t);
              } else if (vol <= 0.75f) {
                float t = (vol - 0.5f) / 0.25f;
                return lerp_color(orange_color, red_color, t);
              } else {
                return red_color;
              }
            };

            // Обработка отключенного звука с элегантным пульсированием
            if (smoothed_volume <= 0.01f) {
              float pulse_cycle = (current_time % 3000) / 3000.0f; // 3 секунды цикл
              float pulse_intensity = (sin(pulse_cycle * 2 * 3.14159f) + 1.0f) / 2.0f;
              pulse_intensity = pulse_intensity * pulse_intensity; // Квадратичная кривая для мягкости
              
              Color muted_color = Color(
                (uint8_t)(purple_color.r * pulse_intensity * 0.4f),
                (uint8_t)(purple_color.g * pulse_intensity * 0.4f),
                (uint8_t)(purple_color.b * pulse_intensity * 0.4f)
              );
              
              for (int i = 0; i < 4; i++) {
                it[i] = muted_color;
              }
              return;
            }

            // Обработка максимальной громкости с предупреждающим миганием
            if (smoothed_volume >= 0.95f) {
              float blink_cycle = (current_time % 800) / 800.0f; // 0.8 секунды цикл
              float blink_intensity = (sin(blink_cycle * 6 * 3.14159f) + 1.0f) / 2.0f;
              blink_intensity = 0.5f + blink_intensity * 0.5f; // От 50% до 100% яркости
              
              Color warning_color = Color(
                (uint8_t)(red_color.r * blink_intensity),
                (uint8_t)(red_color.g * blink_intensity * 0.3f),
                (uint8_t)(red_color.b * blink_intensity * 0.3f)
              );
              
              for (int i = 0; i < 4; i++) {
                it[i] = warning_color;
              }
              return;
            }

            // Вычисляем точное количество активных светодиодов
            float precise_leds = smoothed_volume * 4.0f;
            int full_leds = (int)precise_leds;
            float partial_led = precise_leds - full_leds;

            // Улучшенное плавное затухание
            float fade_speed = 8.0f; // Увеличена скорость отклика
            for (int logical_idx = 0; logical_idx < 4; logical_idx++) {
              float target_brightness = 0.0f;
              
              if (logical_idx < full_leds) {
                target_brightness = 1.0f;
              } else if (logical_idx == full_leds && partial_led > 0.0f) {
                // Плавная кривая для частичного светодиода
                target_brightness = partial_led * partial_led * (3.0f - 2.0f * partial_led);
              }
              
              // Плавное изменение яркости с разной скоростью для включения/выключения
              float current_fade = fade_positions[logical_idx];
              if (target_brightness > current_fade) {
                // Быстрое включение
                fade_positions[logical_idx] += (target_brightness - current_fade) * fade_speed * 1.5f * delta_time;
              } else {
                // Медленное выключение для более плавного эффекта
                fade_positions[logical_idx] += (target_brightness - current_fade) * fade_speed * 0.8f * delta_time;
              }
              
              // Ограничиваем значения
              if (fade_positions[logical_idx] < 0.0f) fade_positions[logical_idx] = 0.0f;
              if (fade_positions[logical_idx] > 1.0f) fade_positions[logical_idx] = 1.0f;
            }

            // Применяем цвета к светодиодам с улучшенной яркостью
            for (int logical_idx = 0; logical_idx < 4; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              
              if (fade_positions[logical_idx] > 0.005f) { // Уменьшен порог для более мягких переходов
                Color base_color = get_volume_color(smoothed_volume);
                
                // Применяем гамма-коррекцию для более естественного восприятия яркости
                float gamma_corrected = pow(fade_positions[logical_idx], 0.8f);
                
                Color final_color = Color(
                  (uint8_t)(base_color.r * gamma_corrected),
                  (uint8_t)(base_color.g * gamma_corrected),
                  (uint8_t)(base_color.b * gamma_corrected)
                );
                
                it[physical_idx] = final_color;
              } else {
                it[physical_idx] = Color::BLACK;
              }
            }

switch:
  - platform: template
    icon: mdi:volume-high
    name: "Use external speaker"
    id: use_voice_speack
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config

  - platform: template
    name: "Sound RTTTL Buzzer"
    icon: mdi:volume-high
    id: rtttl_mute_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

  - platform: template
    name: "Use wake word"
    icon: mdi:microphone-outline
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      # - micro_wake_word.start
      - rtttl.play: 'short_scale_up:d=32,o=5,b=100:c,d,e,f,g'
      - lambda: id(assist).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      # - homeassistant.service:
      #     service: tts.edge_tts_say
      #     data:
      #       entity_id: "${media_player_entity}"
      #       message: "Фраза активации включена"
            
    on_turn_off:
      # - micro_wake_word.stop
      # - voice_assistant.stop
      - rtttl.play: 'scale_down:d=32,o=5,b=100:g,f,e,d,c'
      - voice_assistant.stop
      - lambda: id(assist).set_use_wake_word(false);
      # - homeassistant.service:
      #     service: tts.edge_tts_say
      #     data:
      #       entity_id: "${media_player_entity}"
      #       message: "Фраза активации выключена"


number:
  - platform: template
    name: "Громкость внешнего динамика"
    icon: mdi:speaker-message
    id: volume_level
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: true
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        - homeassistant.service:
            service: media_player.volume_set
            data:
              volume_level: !lambda 'return id(volume_level).state / 100;'
              entity_id: "${media_player_entity}"

  - platform: template
    name: "Громкость внутреннего динамика"
    icon: mdi:speaker-message
    id: volume_level_in
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: true
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        -  speaker.volume_set: !lambda 'return x / 100;'

# Button Reboot
button:
  - platform: restart
    name: "Reboot"
    id: reboot_button
    
  # Новая кнопка для глубокого сна
  - platform: template # Используем платформу template, чтобы можно было выполнить действие
    name: "Sleep" # Название кнопки в Home Assistant
    id: deep_sleep_button # Уникальный ID для этой кнопки
    entity_category: config
    on_press:
      then:
        - rtttl.play: 'scale_down:d=32,o=5,b=100:g,f,e,d,c'
        - delay: 5s
        - deep_sleep.enter: deep_sleep_1 # Действие: переход в глубокий сон


script:
  - id: control_leds_dial_touched
    mode: restart
    then:
      - lambda: |-
          auto brightness = std::max(id(led_ww).current_values.get_brightness(), 0.2f);
          id(led_ww).turn_on()
            .set_brightness(brightness)
            .set_effect("Volume Display")
            .perform();
      - delay: 5s
      - light.turn_off: led_ww
