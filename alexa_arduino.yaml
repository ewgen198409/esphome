substitutions:
  media_player_entity: "media_player.chromepc"

esphome:
  name: alexa

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    # Указываем версию Arduino framework для ESP32-C3
    # version: 3.2.0
    # platform_version: 5.4.1

# Включаем логирование
logger:
  level: INFO

# Включаем Home Assistant API
api:
  encryption:
    key: "c+M3yRoST8qnH2fFAmCj9SJ3ZdECgc8o5/cZEGsKWBg="

# Обновления по воздуху
ota:
  - platform: esphome
    password: "312f283a0164fce9b713ecd13a3cf624"

# Настройки WiFi
wifi:
  networks:
    - ssid: "IoT_Office"
      password: "9514210798"
    - ssid: "OpenWrt_Garage"
      password: "9514210798"

  fast_connect: false
  power_save_mode: none
  # Действия при подключении к WiFi
  on_connect:
    then:
      - if:
          condition:
            # Проверяем, что переключатель звука включен
            switch.is_on: rtttl_mute_switch
          then:
            - rtttl.play: 'wifi_connect:d=16,o=6,b=100:e,g'
      # Индикация подключения светодиодами
      - lambda: |-
          id(led_ww).turn_on().set_brightness(1.0).set_rgb(1.0, 1.0, 0).set_effect("scan").perform();
      - delay: 2s
      - lambda: |-
          id(led_ww).turn_off().perform();

# Настройки глубокого сна
deep_sleep:
  id: deep_sleep_1
  wakeup_pin:
    number: GPIO5
    allow_other_uses: true
  wakeup_pin_mode: KEEP_AWAKE

# Настройка выходного пина для звукового сигнала
output:
  - platform: ledc
    pin: GPIO10
    inverted: false
    id: rtttl_out

# Компонент для воспроизведения мелодий RTTTL
rtttl:
  output: rtttl_out

# Настройка I2S аудио интерфейса
i2s_audio:
  i2s_lrclk_pin: GPIO3   # WS/LRC пин
  i2s_bclk_pin: GPIO2    # SCK/BCLK пин

# Настройка микрофона
microphone:
  - platform: i2s_audio
    id: esp32_microphone
    i2s_din_pin: GPIO4    # SD пин
    adc_type: external
    pdm: false
    channel: left
    bits_per_sample: 32bit
    sample_rate: 16000

# Настройка медиаплеера (замена speaker)
media_player:
  - platform: i2s_audio
    id: esp32_mplayer
    name: "Alexa Speaker"
    dac_type: external
    i2s_dout_pin: GPIO8   # DIN пин

# Настройка голосового помощника
voice_assistant:
  id: assist
  microphone: esp32_microphone
  media_player: esp32_mplayer  # Используем media_player вместо speaker
  use_wake_word: false
  noise_suppression_level: 2
  auto_gain: 20dBFS
  volume_multiplier: 7.0

  # Действия при обнаружении фразы активации
  on_wake_word_detected:
    then:
      - if:
          condition:
            switch.is_on: rtttl_mute_switch
          then:
            - rtttl.play: 'short_scale_up:d=32,o=5,b=100:c,d,e,f,g'

  # # Индикация начала воспроизведения TTS
  # on_tts_stream_start:
  #   - lambda: |-
  #       id(led_ww).turn_on().set_brightness(1.0).set_rgb(0, 1.0, 0).set_effect("scan").perform();
  
  # # Индикация окончания потока TTS
  # on_tts_stream_end:
  #   - lambda: |-
  #       id(led_ww).turn_off().perform();

  # Действия по завершении TTS
  on_tts_end:
    - if:
        condition:
          switch.is_on: use_voice_speack
        then:
          - media_player.volume_set:
              id: esp32_mplayer
              volume: 0.0
          - homeassistant.service:
              service: media_player.play_media
              data:
                media_content_id: !lambda 'return x;'
                media_content_type: audio/mpeg
                entity_id: "${media_player_entity}"

  # Действия при подключении клиента
  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous

  # Действия при отключении клиента
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop

  # Действия по завершении работы
  on_end:
    - if:
        condition:
          switch.is_off: use_voice_speack
        then:
          - media_player.volume_set:
              id: esp32_mplayer
              volume: !lambda 'return id(volume_level_in).state / 100.0;'

  # Индикация режима прослушивания
  on_listening:
    - light.turn_on:
        id: led_ww           
        effect: "Smooth Center Pulse" 

  # Индикация ошибки
  on_error:
    - rtttl.play: 'error_signal:d=16,o=5,b=100:c#,c,b_4'
    - lambda: |-
        id(led_ww).turn_on().set_brightness(1.0).set_rgb(1.0, 0, 0).set_effect("scan").perform();
    - delay: 3s
    - lambda: |-
        id(led_ww).turn_off().perform();

  # Действия при запуске таймера
  on_timer_started:
    then:
      - rtttl.play: 'short_scale_up:d=32,o=5,b=100:e,g,c6'

  # Действия при завершении таймера
  on_timer_finished:
    then:
      - rtttl.play: 'alarm:d=16,o=5,b=100:c6,g,c6,g,c6,g'

  # Действия каждую секунду для активных таймеров
  on_timer_tick:
    then:
      - lambda: |-
          // Логирование оставшегося времени для всех активных таймеров
          ESP_LOGV("timer", "Проверка активных таймеров");

# Настройка двоичных сенсоров (кнопки)
binary_sensor:
  # Кнопка "Громкость выше" (GPIO7)
  - platform: gpio
    pin:
      number: GPIO7
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 1"
    internal: true
    # Звук при нажатии кнопки
    on_click:
      then:
        - if:
            condition:
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c'
    # Обработка одиночного клика
    on_multi_click:
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
        # Увеличиваем громкость на 10%
        - lambda: |-
            auto vol = id(esp32_mplayer).volume;
            if (vol < 1.0) {
              auto call = id(esp32_mplayer).make_call();
              call.set_volume(vol + 0.1);
              call.perform();
            }
        # Обновляем ползунок громкости в интерфейсе
        - lambda: |-
            auto volind = id(volume_level_in).make_call();
            volind.set_value(id(esp32_mplayer).volume * 100);
            volind.perform();
        # Запускаем скрипт индикации
        - script.execute: control_leds_dial_touched

  # Кнопка "Вызов голосового помощника" (GPIO6)
  - platform: gpio
    pin:
      number: GPIO6
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 2"
    internal: true
    # Звук при нажатии
    on_click:
      then:
        - if:
            condition:
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c'
    on_multi_click:
      # Одиночный клик - запуск голосового помощника
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
          - voice_assistant.start        
          - lambda: |-
              if (!id(use_wake_word).state) {
                auto call = id(led_ww).make_call();
                call.set_state(true);
                call.set_rgb(0.3, 0.3, 0.7);
                call.set_brightness(0.6);
                call.set_effect("fast pulse");
                call.perform();
              }
      # Двойной клик - переключение режима фразы активации    
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - switch.toggle: use_wake_word

  # Кнопка выключения/сна (GPIO5)
  - platform: gpio
    pin:
      number: GPIO5
      allow_other_uses: true
      inverted: false
      mode:
        input: true
        pulldown: true
    name: "Button 3"
    internal: true
    # Звук при нажатии
    on_click:
      then:
        - if:
            condition:
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c'
    on_multi_click:
      # Длительное нажатие - переход в глубокий сон    
      - timing:
          - ON for at least 2s
        then:
          - rtttl.play: 'scale_down:d=32,o=5,b=100:g,f,e,d,c'
          - delay: 2s
          - deep_sleep.enter: deep_sleep_1

  # Кнопка "Громкость ниже" (GPIO9)
  - platform: gpio
    pin:
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button 4"
    internal: true
    # Звук при нажатии
    on_click:
      then:
        - if:
            condition:
              switch.is_on: rtttl_mute_switch
            then:
              - rtttl.play: 'button_click:d=32,o=6,b=100:c'
    on_multi_click:
      # Одиночный клик - уменьшение громкости
      - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
        then:
        # Уменьшаем громкость на 10%
        - lambda: |-
            auto vol = id(esp32_mplayer).volume;
            if (vol > 0.0) {
              auto call = id(esp32_mplayer).make_call();
              call.set_volume(vol - 0.1);
              call.perform();
            }
        # Обновляем ползунок громкости в интерфейсе
        - lambda: |-
            auto volind = id(volume_level_in).make_call();
            volind.set_value(id(esp32_mplayer).volume * 100);
            volind.perform();
        # Запускаем скрипт индикации
        - script.execute: control_leds_dial_touched

# Настройка светодиодной ленты
light:
  - platform: esp32_rmt_led_strip
    id: led_ww
    rgb_order: GRB
    pin: GPIO1
    num_leds: 4
    chipset: ws2812
    rmt_channel: 0 # Добавлена обязательная опция rmt_channel
    name: "on board light"
    # Различные световые эффекты
    effects:
      - addressable_color_wipe:
          name: "color wipe"
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - addressable_scan:
          name: "scan"
      # Эффект плавной пульсации от центра
      - addressable_lambda:
          name: "Smooth Center Pulse"
          update_interval: 50ms
          lambda: |-
            // Функция преобразования логического индекса в физический
            // Текущий порядок: 2143, нужный порядок: 3421
            auto logical_to_physical = [](int logical_idx) -> int {
              switch (logical_idx) {
                case 0: return 3; // Логический 1 (центр левый) -> Физический 3
                case 1: return 2; // Логический 2 (центр правый) -> Физический 2
                case 2: return 0; // Логический 3 (край левый) -> Физический 0
                case 3: return 1; // Логический 4 (край правый) -> Физический 1
                default: return logical_idx;
              }
            };

            // Период пульсации в миллисекундах (1 секунда полный цикл)
            const int pulse_period = 1000;
            
            // Определяем текущий цвет на основе времени
            int color_phase = (millis() / pulse_period) % 3;
            Color effect_color;
            switch (color_phase) {
              case 0: effect_color = Color(0, 0, 255);     break; // Синий
              case 1: effect_color = Color(0, 255, 0);     break; // Зеленый  
              case 2: effect_color = Color(255, 255, 0);   break; // Желтый
              default: effect_color = Color(0, 0, 255);    break;
            }
            
            // Получаем текущее время в цикле (0-999 мс)
            int time_in_cycle = millis() % pulse_period;
            
            // Преобразуем в значение от 0 до 1 для синуса
            float phase = (float)time_in_cycle * 2.0f * 3.14159f / (float)pulse_period;
            
            // Базовая яркость (синусоида от 0.1 до 1.0)
            float base_brightness = 0.1f + 0.9f * (sin(phase) + 1.0f) / 2.0f;
            
            // Задержка между центром и краями (в радианах)
            const float delay_offset = 3.14159f / 4.0f; // 45 градусов задержки
            
            // Сбрасываем все светодиоды
            for (int i = 0; i < 4; i++) {
              it[i] = Color::BLACK;
            }
            
            // Центральные светодиоды (логические индексы 0 и 1)
            for (int logical_idx = 0; logical_idx < 2; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              float brightness = base_brightness;
              
              // Ограничиваем яркость от 0.1 до 1.0
              brightness = max(0.1f, min(1.0f, brightness));
              
              it[physical_idx] = Color(
                (uint8_t)(effect_color.r * brightness),
                (uint8_t)(effect_color.g * brightness),
                (uint8_t)(effect_color.b * brightness)
              );
            }
            
            // Крайние светодиоды (логические индексы 2 и 3) с задержкой
            for (int logical_idx = 2; logical_idx < 4; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              
              // Фаза с задержкой для крайних светодиодов
              float delayed_phase = phase - delay_offset;
              float brightness = 0.1f + 0.9f * (sin(delayed_phase) + 1.0f) / 2.0f;
              
              // Ограничиваем яркость от 0.1 до 1.0
              brightness = max(0.1f, min(1.0f, brightness));
              
              it[physical_idx] = Color(
                (uint8_t)(effect_color.r * brightness),
                (uint8_t)(effect_color.g * brightness),
                (uint8_t)(effect_color.b * brightness)
              );
            }
            
      # Эффект отображения уровня громкости
      - addressable_lambda:
          name: "Volume Display"
          update_interval: 30ms
          lambda: |-
            // Статические переменные для сохранения состояния между вызовами
            static float smoothed_volume = 0.0f;
            static float target_volume = 0.0f;
            static uint32_t last_update_time = 0;
            static float fade_positions[4] = {0.0f, 0.0f, 0.0f, 0.0f};
            static bool first_run = true;
            
            uint32_t current_time = millis();
            
            // Инициализация при первом запуске
            if (first_run) {
              last_update_time = current_time;
              first_run = false;
              smoothed_volume = id(esp32_mplayer).volume;
            }
            
            float delta_time = (current_time - last_update_time) / 1000.0f; // в секундах
            last_update_time = current_time;
            
            // Ограничиваем delta_time для стабильности
            if (delta_time > 0.1f) delta_time = 0.1f;
            
            // Получаем текущее значение громкости
            float volume = id(esp32_mplayer).volume;
            target_volume = volume;
            
            // Плавное изменение громкости (сглаживание)
            float smoothing_factor = 12.0f;
            smoothed_volume += (target_volume - smoothed_volume) * smoothing_factor * delta_time;
            
            // Ограничиваем значение
            if (smoothed_volume < 0.0f) smoothed_volume = 0.0f;
            if (smoothed_volume > 1.0f) smoothed_volume = 1.0f;

            // Цвета для разных уровней громкости
            Color blue_color(30, 144, 255);    // Синий
            Color green_color(50, 205, 50);    // Зеленый  
            Color orange_color(255, 165, 0);   // Оранжевый
            Color red_color(220, 20, 60);      // Красный
            Color purple_color(138, 43, 226);  // Фиолетовый

            // Функция преобразования логического индекса в физический
            auto logical_to_physical = [](int logical_idx) -> int {
              switch (logical_idx) {
                case 0: return 3;
                case 1: return 2;
                case 2: return 0;
                case 3: return 1;
                default: return logical_idx;
              }
            };
            
            // Функция плавного перехода между цветами
            auto lerp_color = [](const Color& a, const Color& b, float t) -> Color {
              t = std::max(0.0f, std::min(1.0f, t));
              return Color(
                (uint8_t)(a.r + (b.r - a.r) * t),
                (uint8_t)(a.g + (b.g - a.g) * t),
                (uint8_t)(a.b + (b.b - a.b) * t)
              );
            };
            
            // Функция получения цвета по уровню громкости
            auto get_volume_color = [&](float vol) -> Color {
              if (vol <= 0.0f) {
                return Color::BLACK;
              } else if (vol <= 0.25f) {
                float t = vol / 0.25f;
                return lerp_color(blue_color, green_color, t * 0.8f + 0.2f);
              } else if (vol <= 0.5f) {
                float t = (vol - 0.25f) / 0.25f;
                return lerp_color(green_color, orange_color, t);
              } else if (vol <= 0.75f) {
                float t = (vol - 0.5f) / 0.25f;
                return lerp_color(orange_color, red_color, t);
              } else {
                return red_color;
              }
            };

            // Обработка отключенного звука с пульсированием
            if (smoothed_volume <= 0.01f) {
              float pulse_cycle = (current_time % 3000) / 3000.0f; // 3 секунды цикл
              float pulse_intensity = (sin(pulse_cycle * 2 * 3.14159f) + 1.0f) / 2.0f;
              pulse_intensity = pulse_intensity * pulse_intensity;
              
              Color muted_color = Color(
                (uint8_t)(purple_color.r * pulse_intensity * 0.4f),
                (uint8_t)(purple_color.g * pulse_intensity * 0.4f),
                (uint8_t)(purple_color.b * pulse_intensity * 0.4f)
              );
              
              for (int i = 0; i < 4; i++) {
                it[i] = muted_color;
              }
              return;
            }

            // Обработка максимальной громкости с предупреждающим миганием
            if (smoothed_volume >= 0.95f) {
              float blink_cycle = (current_time % 800) / 800.0f;
              float blink_intensity = (sin(blink_cycle * 6 * 3.14159f) + 1.0f) / 2.0f;
              blink_intensity = 0.5f + blink_intensity * 0.5f;
              
              Color warning_color = Color(
                (uint8_t)(red_color.r * blink_intensity),
                (uint8_t)(red_color.g * blink_intensity * 0.3f),
                (uint8_t)(red_color.b * blink_intensity * 0.3f)
              );
              
              for (int i = 0; i < 4; i++) {
                it[i] = warning_color;
              }
              return;
            }

            // Вычисляем количество активных светодиодов
            float precise_leds = smoothed_volume * 4.0f;
            int full_leds = (int)precise_leds;
            float partial_led = precise_leds - full_leds;

            // Плавное затухание
            float fade_speed = 8.0f;
            for (int logical_idx = 0; logical_idx < 4; logical_idx++) {
              float target_brightness = 0.0f;
              
              if (logical_idx < full_leds) {
                target_brightness = 1.0f;
              } else if (logical_idx == full_leds && partial_led > 0.0f) {
                target_brightness = partial_led * partial_led * (3.0f - 2.0f * partial_led);
              }
              
              // Плавное изменение яркости
              float current_fade = fade_positions[logical_idx];
              if (target_brightness > current_fade) {
                fade_positions[logical_idx] += (target_brightness - current_fade) * fade_speed * 1.5f * delta_time;
              } else {
                fade_positions[logical_idx] += (target_brightness - current_fade) * fade_speed * 0.8f * delta_time;
              }
              
              // Ограничиваем значения
              if (fade_positions[logical_idx] < 0.0f) fade_positions[logical_idx] = 0.0f;
              if (fade_positions[logical_idx] > 1.0f) fade_positions[logical_idx] = 1.0f;
            }

            // Применяем цвета к светодиодам
            for (int logical_idx = 0; logical_idx < 4; logical_idx++) {
              int physical_idx = logical_to_physical(logical_idx);
              
              if (fade_positions[logical_idx] > 0.005f) {
                Color base_color = get_volume_color(smoothed_volume);
                
                // Применяем гамма-коррекцию
                float gamma_corrected = pow(fade_positions[logical_idx], 0.8f);
                
                Color final_color = Color(
                  (uint8_t)(base_color.r * gamma_corrected),
                  (uint8_t)(base_color.g * gamma_corrected),
                  (uint8_t)(base_color.b * gamma_corrected)
                );
                
                it[physical_idx] = final_color;
              } else {
                it[physical_idx] = Color::BLACK;
              }
            }

# Настройка переключателей
switch:
  # Переключатель использования внешнего динамика
  - platform: template
    icon: mdi:volume-high
    name: "Use external speaker"
    id: use_voice_speack
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config

  # Переключатель звуковых уведомлений
  - platform: template
    name: "Sound RTTTL Buzzer"
    icon: mdi:volume-high
    id: rtttl_mute_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

  # Переключатель фразы активации
  - platform: template
    name: "Use wake word"
    icon: mdi:microphone-outline
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    # Включение фразы активации
    on_turn_on:
      - lambda: id(assist).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
    # Выключение фразы активации        
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(assist).set_use_wake_word(false);

# Настройка числовых параметров
number:
  # Громкость внешнего динамика
  - platform: template
    name: "Громкость внешнего динамика"
    icon: mdi:speaker-message
    id: volume_level
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: true
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        - homeassistant.service:
            service: media_player.volume_set
            data:
              volume_level: !lambda 'return id(volume_level).state / 100;'
              entity_id: "${media_player_entity}"

  # Громкость внутреннего динамика
  - platform: template
    name: "Громкость внутреннего динамика"
    icon: mdi:speaker-message
    id: volume_level_in
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: true
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        - lambda: |-
            auto call = id(esp32_mplayer).make_call(); // Создаем объект вызова
            call.set_volume(id(volume_level_in).state / 100.0); // Используем set_volume на объекте вызова
            call.perform(); // Выполняем вызов

# Button Reboot
button:
  - platform: restart
    name: "Reboot"
    id: reboot_button
    
  # Новая кнопка для глубокого сна
  - platform: template # Используем платформу template, чтобы можно было выполнить действие
    name: "Sleep" # Название кнопки в Home Assistant
    id: deep_sleep_button # Уникальный ID для этой кнопки
    entity_category: config
    on_press:
      then:
        - rtttl.play: 'scale_down:d=32,o=5,b=100:g,f,e,d,c'
        - delay: 5s
        - deep_sleep.enter: deep_sleep_1 # Действие: переход в глубокий сон


script:
  - id: control_leds_dial_touched
    mode: restart
    then:
      - lambda: |-
          auto brightness = std::max(id(led_ww).current_values.get_brightness(), 0.2f);
          id(led_ww).turn_on()
            .set_brightness(brightness)
            .set_effect("Volume Display")
            .perform();
      - delay: 5s
      - light.turn_off: led_ww