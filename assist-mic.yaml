esphome:
  name: assist-mic
  friendly_name: assist mic
  platformio_options:
    board_build.flash_mode: dio
    board_build.f_cpu: 160000000L
  on_boot:
     - priority: -100
       then:
         - wait_until: api.connected
         - delay: 1s
         - if:
             condition:
               switch.is_on: use_wake_word
             then:
               - voice_assistant.start_continuous:


#Pin25 GND
#Pin26 VCC
#Pin27 aka GPIO05 SD Mic
#Pin23 GPIO07 SCK
#Pin22 GPIO06 WS

esp32:
  board: airm2m_core_esp32c3
  flash_size: 4MB
#  variant: esp32c3
  framework:
    type: esp-idf

preferences:
  flash_write_interval: 1min

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "tBMjzN7YM3yCfCtLKlqIB+HDpAQtqAw5hdlEeIgMK9k="

ota:
  - platform: esphome
    password: "ec2fe7a3e7cb24907828808a904653e6"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Assist-Mic Fallback Hotspot"
    password: "dp76Jqw7tmtI"

captive_portal:
i2s_audio:
    i2s_lrclk_pin: GPIO6  ##INMP441-WS
    i2s_bclk_pin: GPIO7  ##INMP441-SCK

microphone:
  platform: i2s_audio 
  id: external_microphone 
  adc_type: external 
  i2s_din_pin: GPIO5
  channel: left
  pdm: false
#  bits_per_sample: 32bit

voice_assistant:
  microphone: external_microphone
  use_wake_word: false
  noise_suppression_level: 1
#  auto_gain: 0dBFS
  volume_multiplier: 5.0
  id: assist
  on_tts_end:
    - if:
        condition: 
          switch.is_on: use_voice_speack
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                media_content_id: !lambda 'return x;'
                media_content_type: audio/mpeg
                entity_id: media_player.mpd_hass
          - delay: 0.5s
          - homeassistant.service:
              service: media_player.volume_set
              data:
                volume_level: !lambda 'return id(volume_level).state / 100;'
                entity_id: media_player.mpd_hass
    - display.page.show: page1

  on_idle:
    - light.turn_off:
        id: led1
    - light.turn_off:
        id: led0

  on_end:
    - display.page.show: page1
    - light.turn_off:
        id: led1
    - light.turn_off:
        id: led0
      
  on_intent_start:
    - light.turn_on:
        id: led0 

  on_listening:
    - display.page.show: page2
    - rtttl.play: "Cat:d=16,o=6,b=95:32d,32d#,32d,32d#"
    - light.turn_on:
        id: led1
        effect: "Fast Pulse"

  on_wake_word_detected:
    - light.turn_on:
        id: led1
        effect: "Fast Pulse"

number:
  - platform: template
    name: "Громкость динамика"
    icon: mdi:speaker-message
    id: volume_level
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: True
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        - homeassistant.service:
            service: media_player.volume_set
            data:
              volume_level: !lambda 'return x/100;'
              entity_id: media_player.mpd_hass

switch:
  - platform: template
    icon: mdi:volume-high
    name: Use voice speaker
    id: use_voice_speack
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

  - platform: template
    name: Use wake word
    icon: mdi:microphone-outline
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(assist).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(assist).set_use_wake_word(false);    

binary_sensor:
  - platform: status
    name: API Connection
    id: api_connection
    filters:
      - delayed_on: 1s
    on_press:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.start_continuous:
    on_release:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.stop:

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: Talk Switch
    id: Swith_speak
    internal: True
    on_click:
      - min_length: 100ms
        max_length: 1000ms
        then:
          - delay: 1s
          - voice_assistant.start:
      - min_length: 3000ms
        max_length: 7000ms
        then:
          - switch.toggle:
              id: use_wake_word
  
sensor:
  - platform: uptime
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 60s
    id: wifi_signal_db
# Reports the WiFi signal strength in %
  - platform: copy 
    source_id: wifi_signal_db
    id: idWiFisignal
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: "diagnostic"
    device_class: ""
# Battery sensor
  - platform: adc
    pin: GPIO4
    id: idADC
    name: "Battery Voltage"
    update_interval: 2s
    attenuation: 11db #required
    filters:
     - multiply: 1.0
     - offset: 0.00 #trim reading by adjusting this value
  - platform: copy
    name: Battery Level
    icon: mdi:battery
    id: idBatteryLevel
    source_id: idADC
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
          - 1.810 -> 0
          - 2.060 -> 100

  # Сенсор погоды
  - platform: homeassistant
    id: weather_temp
    entity_id: weather.home_weather
    attribute: temperature
    internal: true

  - platform: homeassistant
    id: veter_speed
    entity_id: weather.home_weather
    attribute: wind_speed
    internal: true

output:
  - id: light0_output
    platform: ledc
    pin: 
      number: GPIO12
      ignore_pin_validation_error: true

  - id: light1_output
    platform: ledc
    pin: 
      number: GPIO13
      ignore_pin_validation_error: true
  
  - platform: ledc
    pin: GPIO1
    id: rtttl_out

rtttl:
  output: rtttl_out

light:
  - platform: monochromatic
    output: light1_output
    id: led1
    name: "LED1"
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%

  - platform: monochromatic
    output: light0_output
    id: led0
    name: "LED0"  

# DISPLAY FUNKTION
# получаем время из ХА 
time:
  - platform: homeassistant
    id: homeassistant_time

font:
  - file: "fonts/DS-DIGIB.ttf"
    id: tahoma_clock
    size: 27
  - file: "fonts/timesnewromanpsmt.ttf"
    id: ComicNeue
    size: 15

image:
   # Battery img 
  - file: battery-high.png
    id: bathigh
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: battery-medium.png
    id: batmedium
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: battery-low.png
    id: batlow
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: batdead.png
    id: batdead
    resize: 27x20
    type: TRANSPARENT_BINARY
    # WiFi img
  - file: wifi-strength-1-custom.png
    id: wifi1
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-2-custom.png
    id: wifi2
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-3-custom.png
    id: wifi3
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-4-custom.png
    id: wifi4
    resize: 14x14
    type: TRANSPARENT_BINARY

# икоки погоды
  - file: mdi:clock-outline
    id: clock_icon
    resize: 16x16

  - file: "moon.png"
    id: my_moon
    resize: 24x24
    type: TRANSPARENT_BINARY

  - file: "cloudy.png"
    id: my_cloudy
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "snow.png"
    id: my_snow
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "soon.png"
    id: my_soon
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "zarko.png"
    id: my_zarko
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "groza.png"
    id: my_groza
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "veter.png"
    id: my_veter
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "weather.png"
    id: my_dozd
    resize: 25x25
    type: TRANSPARENT_BINARY

  # ICON VOICE
  - file: account-voice.png
    id: voiceon
    resize: 18x18
    type: TRANSPARENT_BINARY
  - file: account-voice-off.png
    id: voiceoff
    resize: 18x18
    type: TRANSPARENT_BINARY

animation:
  - file: speak.gif
    id: speakgif
    resize: 128x64

text_sensor:
  - platform: homeassistant
    id: weather_icon1
    entity_id: weather.home_weather
    internal: true

#i2c:
#  sda: GPIO9
# scl: GPIO8

#display:
#  - platform: ssd1306_i2c
#    model: "SSD1306 128x64"
#    address: 0x3c
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%

spi:
  mosi_pin: GPIO9
  clk_pin: GPIO8

display:
  - platform: st7735
    model: "INITR_GREENTAB"
    dc_pin: GPIO18
    cs_pin: GPIO3
    reset_pin: GPIO19
    rotation: 270
    device_width: 128
    device_height: 160
    col_start: 0
    row_start: 0
    eight_bit_color: true
    pages:
      - id: page1
        lambda: |-
          // Print time in HH:MM format вывол часов
          it.strftime(0, 19, id(tahoma_clock), id(my_green), TextAlign::BASELINE_LEFT, "%H:%M:%S", id(homeassistant_time).now());

          // Print вывол даты
          it.strftime(0, 33, id(ComicNeue), id(my_red), TextAlign::BASELINE_LEFT, "%d %b %Y", id(homeassistant_time).now());

          // Print вывол день недели
          it.strftime(0, 48, id(ComicNeue), TextAlign::BASELINE_LEFT, "%A", id(homeassistant_time).now());

          // Отображение заряда батареи at position [x=0,y=0] %
          if (id(idBatteryLevel).state <= 10)
            it.image(108, 0, id(batdead));
          else if (id(idBatteryLevel).state <= 30)
            it.image(108, 0, id(batlow));
          else if (id(idBatteryLevel).state <= 70)
            it.image(108, 0, id(batmedium));
          else if (id(idBatteryLevel).state <= 120)
            it.image(108, 0, id(bathigh));

          // Отображение уровня WiFi %
          if (id(idWiFisignal).state <= 10)
            it.image(90, 0, id(wifi1));
          else if (id(idWiFisignal).state <= 40)
            it.image(90, 0, id(wifi2));
          else if (id(idWiFisignal).state <= 80)
            it.image(90, 0, id(wifi3));
          else
            it.image(90, 0, id(wifi4));

          // определение иконки погоды
          if (id(weather_icon1).state == "clear-night") {
            it.image(55, 37, id(my_moon)); }
          else if (id(weather_icon1).state == "partlycloudy") {
            it.image(55, 37, id(my_cloudy)); }
          else if (id(weather_icon1).state == "sunny") {
            it.image(55, 37, id(my_soon)); }
          else if (id(weather_icon1).state == "pouring" or "rainy") {
            it.image(55, 37, id(my_dozd)); }
          else if (id(weather_icon1).state == "windy" or "windy-variant") {
            it.image(55, 37, id(my_veter)); }
          else if (id(weather_icon1).state == "snowy" or "snowy-rainy") {
            it.image(55, 37, id(my_snow)); }
          else {
            it.image(55, 37, id(my_cloudy));
          }

          // температура
          if (id(weather_temp).has_state()) {
            it.printf(82, 49, id(ComicNeue),  TextAlign::BASELINE_LEFT , "t:%.1f°", id(weather_temp).state);
          }

          // скорость ветра
          if (id(veter_speed).has_state()) {
            it.printf(82, 63, id(ComicNeue),  TextAlign::BASELINE_LEFT , "%.0f km/h", id(veter_speed).state);
          }

          // ICON VOICE
          if (id(use_wake_word).state) {
            it.image(109, 15, id(voiceon));
          } else {
            it.image(109, 15, id(voiceoff));
          }
      - id: page2
        lambda: |-
          id(speakgif).next_frame();
          it.image(0, 0, id(speakgif));

# Войти в venv
# source venv/bin/activate

# Собрать и загрузить
# esphome run assist-mic.yaml

# Компилировать
# esphome compile assist-mic.yaml

# Очистить сборку
# esphome clean assist-mic.yaml