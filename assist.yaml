esphome:
  name: assist
  friendly_name: assist
  on_boot:
    - priority: -100
      then:
        # - wait_until: api.connected
        # - delay: 1s
        # - if:
        #     condition:
        #       switch.is_on: use_wake_word
        #     then:
        #       - voice_assistant.start_continuous:
        - light.turn_on:
            id: lccdled
            brightness: !lambda "return id(ledtmp);"

esp32:
  board: lolin_s2_mini
  variant: ESP32S2
  framework:
    type: esp-idf

preferences:
  flash_write_interval: 5min   

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "z8v0h55winCRRRdkjr/A5HZuRp8WRUk5T8YGyoFe/FI="

ota:
  - platform: esphome
    password: "dc226869d3e2e0701f4921e0d8032ad0"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"
  reboot_timeout: 0s
  manual_ip:
    static_ip: 192.168.1.208
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Assist Fallback Hotspot"
    password: "di84RAYapMGq"

captive_portal:
i2s_audio:
    i2s_lrclk_pin: GPIO6  ##INMP441-WS
    i2s_bclk_pin: GPIO7  ##INMP441-SCK

microphone:
  platform: i2s_audio 
  id: external_microphone 
  adc_type: external 
  i2s_din_pin: GPIO5
  channel: left
  pdm: false
#  bits_per_sample: 32bit

voice_assistant:
  microphone: external_microphone
  use_wake_word: false
  noise_suppression_level: 1
#  auto_gain: 0dBFS
  volume_multiplier: 5.0
  id: assist
  on_tts_end:
    - if:
        condition: 
          switch.is_on: use_voice_speack
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                media_content_id: !lambda 'return x;'
                media_content_type: audio/mpeg
                entity_id: media_player.mpd_hass
          - delay: 0.5s
          - homeassistant.service:
              service: media_player.volume_set
              data:
                volume_level: !lambda 'return id(volume_level).state / 100;'
                entity_id: media_player.mpd_hass

  on_listening:
    - rtttl.play: "Cat:d=16,o=6,b=95:32d,32d#,32d,32d#"

deep_sleep:
  id: deep_sleep_1
  run_duration: 10min
  esp32_ext1_wakeup:
    pins:
      number: 14
      inverted: false
      mode: INPUT_PULLDOWN
      allow_other_uses: true
    mode: ANY_HIGH

number:
  - platform: template
    id: mylcdled
    name: "mylcdled"
    optimistic: true
    min_value: 0.0
    max_value: 100.0
    step: 10.0
    mode: box
    restore_value: True
    entity_category: config
    on_value:
      then:
        - lambda: 'ESP_LOGI("number", "value: %f", x);'
        - light.turn_on:
            id: lccdled
            brightness: !lambda "return x/100;"
        - delay: 1s
        # - lambda: |-
        #     id(ledtmp) = id(lccdled).current_values.get_brightness();
        - globals.set:
            id: ledtmp
            value: !lambda "return x/100;"

  - platform: template
    name: "Громкость динамика"
    icon: mdi:speaker-message
    id: volume_level
    min_value: 0
    max_value: 100
    step: 5
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: True
    unit_of_measurement: "%"
    entity_category: config
    on_value:
      then:
        - lambda: 'ESP_LOGI("number", "value: %f", x);'
        - homeassistant.service:
            service: media_player.volume_set
            data:
              volume_level: !lambda 'return x/100;'
              entity_id: media_player.mpd_hass

switch:
  - platform: template
    icon: mdi:volume-high
    name: Use voice speaker
    id: use_voice_speack
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

  - platform: template
    icon: mdi:volume-high
    name: Use beeper
    id: use_beeper
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

  - platform: template
    name: Use wake word
    icon: mdi:microphone-outline
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(assist).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(assist).set_use_wake_word(false);    

    

binary_sensor:
  - platform: status
    name: API Connection
    id: api_connection
    filters:
      - delayed_on: 1s
    on_press:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.start_continuous:
    on_release:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.stop:

# BUTTON
  - platform: gpio
    pin:
      number: GPIO40
      inverted: false
      mode:
        input: true
        pulldown: true
    name: Talk Switch
    id: Swith_speak
    internal: True
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:

      - if:
          condition:
            switch.is_on: use_beeper
          then:
            rtttl.play: s:d=4,o=5,b=250:b7
      - if:
          condition:
            - lambda: |-
                return id(lccdled).current_values.get_brightness() > 0.35;
            - display.is_displaying_page: page1
            - switch.is_off: use_wake_word
          then:
            - display.page.show: page2
            - delay: 1s
            - voice_assistant.start:
            - delay: 2s
            - display.page.show: page1

      - if:
          condition:
            display_menu.is_active: my_display_menu
          then:
            - display_menu.up: my_display_menu
      - delay: 0.5s
      - light.turn_on:
          id: lccdled
          brightness: !lambda "return id(ledtmp);"

    on_click:
      # - min_length: 2000ms
      #   max_length: 3000ms
      #   then:
      #     - if:
      #         condition:
      #           display.is_displaying_page: page1
      #         then:
      #           - switch.toggle:
      #               id: use_wake_word
      - min_length: 2000ms
        max_length: 10000ms
        then:
          - deep_sleep.enter: deep_sleep_1

  - platform: gpio
    pin:
      number: GPIO39
      inverted: false
      mode:
        input: true
        pulldown: true
    name: Switch 3
    id: Swith_3
    internal: True
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - light.turn_on:
          id: lccdled
          brightness: !lambda "return id(ledtmp);"
      - if:
          condition:
            display_menu.is_active: my_display_menu
          then:
            - display_menu.down: my_display_menu
      - if:
          condition:
            switch.is_on: use_beeper
          then:
            rtttl.play: s:d=4,o=5,b=250:b7

    on_click:
      - min_length: 500ms
        max_length: 1000ms
        then:
          - if:
              condition:
                display.is_displaying_page: page1
              then:
                - remote_transmitter.transmit_nec:
                    address: 0xFF00
                    command: 0xBF40

  - platform: gpio
    pin:
      number: GPIO14
      inverted: false
      allow_other_uses: true
      mode:
        input: true
        pulldown: true
    name: Switch 2
    id: Swith_2
    internal: True
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - light.turn_on:
          id: lccdled
          brightness: !lambda "return id(ledtmp);"
      - if:
          condition:
            switch.is_on: use_beeper
          then:
            rtttl.play: s:d=4,o=5,b=250:b7
      - if:
          condition:
            display_menu.is_active: my_display_menu
          then:
            - display_menu.enter: my_display_menu
          else:
            - display_menu.show:  my_display_menu


sensor:
  - platform: uptime
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 5min
    id: wifi_signal_db
# Reports the WiFi signal strength in %
  - platform: copy 
    source_id: wifi_signal_db
    id: idWiFisignal
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: "diagnostic"
    device_class: ""
# Battery sensor
  - platform: adc
    pin: GPIO4
    id: idADC
    name: "Battery Voltage"
    attenuation: 12db #required
    update_interval: 60s
    filters:
      - multiply: 2.0
      - offset: 0.00 #trim reading by adjusting this value
  - platform: copy
    name: Battery Level
    icon: mdi:battery
    id: idBatteryLevel
    source_id: idADC
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
          - 3.600 -> 0
          - 4.200 -> 100

  # Сенсор погоды
  - platform: homeassistant
    id: weather_temp
    entity_id: weather.home_weather
    attribute: temperature
    internal: true

  - platform: homeassistant
    id: veter_speed
    entity_id: weather.home_weather
    attribute: wind_speed
    internal: true

  - platform: homeassistant
    id: humidity
    entity_id: weather.home_weather
    attribute: humidity
    internal: true

# Button Reboot
button:
  - platform: restart
    name: "Reboot"
    id: reboot_button

  - platform: template
    name: Light garage
    id: switch_light_garage
    internal: True
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.garazh
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.garazh_2
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.garazh_tasmota3


output:
  - platform: ledc
    pin: GPIO1
    id: rtttl_out
  - id: light1_output
    platform: ledc
    pin: 
      number: GPIO15
  - platform: ledc
    # D2 = GPIO2 Backlight LED for this device
    pin: GPIO2
    id: lcdled

rtttl:
  output: rtttl_out

light:
  - platform: monochromatic
    output: lcdled
    id: lccdled
    name: Display Backlight

interval:
  interval: 60s
  id: led_interval
  then:
    - if:
        condition:
          - display.is_displaying_page: page1
        then:
          - light.turn_on:
              id: lccdled
              brightness: 30%
              transition_length: 2s
          - delay: 1min
          - if:
              condition:
                - lambda: |-
                    return id(lccdled).current_values.get_brightness() <= 0.35;
              then:
                - deep_sleep.allow: deep_sleep_1
        else:
          - deep_sleep.prevent: deep_sleep_1
globals:
  - id: ledtmp
    type: float
    restore_value: yes

# DISPLAY FUNKTION
# получаем время из ХА 
time:
  - platform: homeassistant
    id: homeassistant_time

font:
  - file: "fonts/DS-DIGIB.ttf"
    id: tahoma_clock
    size: 27
  - file: "fonts/timesnewromanpsmt.ttf"
    id: ComicNeue
    size: 15
  - file: "fonts/tahoma.ttf"
    id: tahoma
    size: 10
  - file: "fonts/Roboto-Regular.ttf"
    id: font_01
    size: 15
  - file: "fonts/tahoma.ttf"
    id: font_menu
    size: 15

image:
   # Battery img 
  - file: battery-high.png
    id: bathigh
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: battery-medium.png
    id: batmedium
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: battery-low.png
    id: batlow
    resize: 27x20
    type: TRANSPARENT_BINARY
  - file: batdead.png
    id: batdead
    resize: 27x20
    type: TRANSPARENT_BINARY
    # WiFi img
  - file: wifi-strength-1-custom.png
    id: wifi1
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-2-custom.png
    id: wifi2
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-3-custom.png
    id: wifi3
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: wifi-strength-4-custom.png
    id: wifi4
    resize: 14x14
    type: TRANSPARENT_BINARY

# икоки погоды
  - file: mdi:clock-outline
    id: clock_icon
    resize: 16x16

  - file: "moon.png"
    id: my_moon
    resize: 24x24
    type: TRANSPARENT_BINARY

  - file: "cloudy.png"
    id: my_cloudy
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "snow.png"
    id: my_snow
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "soon.png"
    id: my_soon
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "zarko.png"
    id: my_zarko
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "groza.png"
    id: my_groza
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "veter.png"
    id: my_veter
    resize: 25x25
    type: TRANSPARENT_BINARY

  - file: "weather.png"
    id: my_dozd
    resize: 25x25
    type: TRANSPARENT_BINARY

  # ICON VOICE
  - file: speaker.png
    id: voiceon
    resize: 14x14
    type: TRANSPARENT_BINARY
  - file: mic.png
    id: micon
    resize: 13x13
    type: TRANSPARENT_BINARY

animation:
  - file: speak.gif
    id: speakgif
    resize: 128x64

remote_transmitter:
  pin: GPIO16
  carrier_duty_percent: 50%
  id: irblast

text_sensor:
  - platform: homeassistant
    id: weather_icon1
    entity_id: weather.home_weather
    internal: true

  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ipaddr
    ssid:
      name: ESP Connected SSID
      id: ssid

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%

spi:
  mosi_pin: GPIO9 # SDA
  clk_pin: GPIO8 # SCL
  interface: hardware

display:
  - platform: st7735
    model: "INITR_GREENTAB"
    dc_pin: GPIO17 # Pin A0
    cs_pin: GPIO3 # В воздухе
    reset_pin: GPIO21 # RES
    rotation: 270
    data_rate: 80MHz
    device_width: 128
    device_height: 160
    col_start: 0
    row_start: 0
    eight_bit_color: false
    id: mydisplay
    pages:
      - id: page1
        lambda: |-
          // Print time in HH:MM format вывол часов
          it.strftime(0, 19, id(tahoma_clock), id(my_green), TextAlign::BASELINE_LEFT, "%H:%M:%S", id(homeassistant_time).now());

          // Print вывол даты
          it.strftime(0, 33, id(ComicNeue), id(my_red), TextAlign::BASELINE_LEFT, "%d %b %Y", id(homeassistant_time).now());

          // Print вывол день недели
          it.strftime(0, 48, id(ComicNeue), TextAlign::BASELINE_LEFT, "%A", id(homeassistant_time).now());

          // Отображение заряда батареи at position [x=0,y=0] %
          if (id(idBatteryLevel).state <= 10)
            it.image(140, 0, id(batdead));
          else if (id(idBatteryLevel).state <= 30)
            it.image(140, 0, id(batlow));
          else if (id(idBatteryLevel).state <= 70)
            it.image(140, 0, id(batmedium));
          else if (id(idBatteryLevel).state <= 120)
            it.image(140, 0, id(bathigh));

          // Отображение уровня WiFi %
          if (id(idWiFisignal).state <= 10)
            it.image(123, 0, id(wifi1));
          else if (id(idWiFisignal).state <= 40)
            it.image(123, 0, id(wifi2));
          else if (id(idWiFisignal).state <= 80)
            it.image(123, 0, id(wifi3));
          else
            it.image(123, 0, id(wifi4));

          if (id(use_voice_speack).state == true)
            it.image(92, 0, id(voiceon));

          if (id(use_wake_word).state == true)
            it.image(107, 0, id(micon));

          // определение иконки погоды
          if (id(weather_icon1).state == "clear-night") {
            it.image(9, 63, id(my_moon)); }
          else if (id(weather_icon1).state == "partlycloudy") {
            it.image(9, 63, id(my_cloudy)); }
          else if (id(weather_icon1).state == "sunny") {
            it.image(9, 63, id(my_soon)); }
          else if (id(weather_icon1).state == "pouring" or "rainy") {
            it.image(9, 63, id(my_dozd)); }
          else if (id(weather_icon1).state == "windy" or "windy-variant") {
            it.image(9, 63, id(my_veter)); }
          else if (id(weather_icon1).state == "snowy" or "snowy-rainy") {
            it.image(9, 63, id(my_snow)); }
          else {
            it.image(9, 63, id(my_cloudy));
          }
  
          // Circles! Let's draw one with the center at [20,40] and a radius of 10
          it.circle(20, 78, 19, id(my_blue));

          // -------------------------------------------------------
          it.line(0, 53 , 160, 53, id(my_yellow));
          it.line(0, 105 , 160, 105, id(my_yellow));

          // температура
          if (id(weather_temp).has_state()) {
            it.printf(46, 54, id(ComicNeue), "temp: %.1f°C", id(weather_temp).state);
          }

          // скорость ветра
          if (id(veter_speed).has_state()) {
            it.printf(46, 69, id(ComicNeue), "veter: %.0f km/h", id(veter_speed).state);
          }

          // Vlaznost'
          if (id(humidity).has_state()) {
            it.printf(46, 84, id(ComicNeue), "hum: %.0f", id(humidity).state);
          }

          //IP & SSID
          it.printf(0, 110, id(tahoma), id(my_yellow), "%s:", id(ssid).state.c_str());
          it.printf(47, 110, id(tahoma), id(my_yellow), "%s", id(ipaddr).state.c_str());

      - id: page2
        lambda: |-
          id(speakgif).next_frame();
          it.image(0, 0, id(speakgif));

      - id: graph_page
        lambda: |-
          it.print(0, 0, id(ComicNeue), "My menu is not currently active");

# Настройка графического меню #############################
graphical_display_menu:
  id: my_display_menu
  display: mydisplay
  font: font_menu
  on_redraw:
    then:
      component.update: mydisplay
  active: false
  mode: rotary
# Не перходить в сон пока активно меню #######################
  # on_enter:
  #   then:
  #     - deep_sleep.prevent: deep_sleep_1

# ##############################################################
# Menu settings
  items:
    - type: menu
      text: 'Settings'
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "enter: %s", it->get_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "leave: %s", it->get_text().c_str());'
      items:
        - type: number
          text: 'Brightness:  '
          format: '%.0f'
          number: mylcdled
          on_enter:
            then:
              lambda: 'ESP_LOGI("display_menu", "number enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_leave:
            then:
              lambda: 'ESP_LOGI("display_menu", "number leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_value:
            then:
              lambda: 'ESP_LOGI("display_menu", "number value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

        - type: switch
          immediate_edit: false
          text: 'Use hass speack:'
          on_text: 'On'
          off_text: 'Off'
          switch: use_voice_speack
          on_enter:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_leave:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_value:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
        - type: number
          text: 'Volume Hass:  '
          format: '%.0f'
          number: volume_level
          on_enter:
            then:
              lambda: 'ESP_LOGI("display_menu", "number enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_leave:
            then:
              lambda: 'ESP_LOGI("display_menu", "number leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_value:
            then:
              lambda: 'ESP_LOGI("display_menu", "number value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

        - type: switch
          immediate_edit: false
          text: 'Use beeper:  '
          on_text: 'On'
          off_text: 'Off'
          switch: use_beeper
          on_enter:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_leave:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_value:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

        - type: switch
          immediate_edit: false
          text: 'Use wake word:'
          on_text: 'On'
          off_text: 'Off'
          switch: use_wake_word
          on_enter:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_leave:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
          on_value:
            then:
              lambda: 'ESP_LOGI("display_menu", "switch value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

        - type: back
          text: 'Back'

# Menu garage ##########################################################################################
    - type: menu
      text: 'Garage'
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "enter: %s", it->get_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "leave: %s", it->get_text().c_str());'
      items:
        - type: command
          text: 'All Light'
          on_value:
            then:
              - button.press: switch_light_garage

        - type: back
          text: 'Back'
# ########################################################################################################

    - type: command
      text: 'Reboot'
      on_value:
        then:
          - button.press: reboot_button

    - type: command
      text: 'Exit'
      on_value:
        then:
          - display_menu.hide: my_display_menu
          - display.page.show: page1

# Войти в venv
# source venv/bin/activate

# Собрать и загрузить
# esphome run assist-mic.yaml

# Компилировать
# esphome compile assist-mic.yaml

# Очистить сборку
# esphome clean assist-mic.yaml