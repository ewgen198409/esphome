esphome:
  name: block-prihozka
  friendly_name: Block_Prihozka 

esp8266:
  board: d1_mini
  restore_from_flash: true

# web_server:
#   port: 80
#   version: 2

preferences:
  flash_write_interval: 1min
  
# Enable logging
logger:

api:
  reboot_timeout: 0s
  encryption:
    key: "KOWDAA8XBu8jM5F884wvQ6ji5Mhwm2J29yZXx2C9Kko="

ota:
  - platform: esphome
    password: "9aa6e161a6c491657f320a1b15fde731"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: Keenetic-Home
      password: "9994554500"

  ap:
    ssid: "Block-Prihozka Fallback Hotspot"
    password: "mXyPb1kexKGo"

udp:

# ===================== MQTT ========================================
mqtt:
  broker: 192.168.1.1
  port: 1883
  discovery: false
  discover_ip: false
# ======================================================================
captive_portal:

# ================= TIME ====================================
time:
  - platform: sntp
    id: ntp_time
    timezone: Asia/Omsk
    servers:
      - 0.openwrt.pool.ntp.org
      - 1.openwrt.pool.ntp.org
      - 2.openwrt.pool.ntp.org

# ===============================================================
button:
  - platform: restart
    name: Restart 

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

  # Сенсор времени ESPHOME
  - platform: template
    name: "Current time"
    entity_category: "diagnostic"
    lambda: |-
      char str[20];  // Размер строки для хранения времени
      auto currTime = id(ntp_time).now();
      snprintf(str, sizeof(str), "%02d:%02d:%02d",
                currTime.hour, currTime.minute, currTime.second);
      return {str};  // Возвращаем строку как текстовый сенсор
    update_interval: 60s
# ================== Init relay ================================
switch:
  - platform: gpio
    id: switch_5
    name: Реле 5
    icon: mdi:water-boiler
    pin:
      number: GPIO16
      inverted: false
      mode:
        output: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: switch_1
    name: Реле 1
    icon: mdi:water-boiler
    pin:
      number: GPIO5
      inverted: false
      mode:
        output: true
    restore_mode: ALWAYS_OFF

  # Выключатель авто режима вентиляции по таймеру
  - platform: template
    name: "Авто режим вентиляции по таймеру"
    icon: mdi:fan-auto
    id: auto_fantimer
    optimistic: true  # Для синхронизации состояния в Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF
# ========================= Вентиляция ======================================
fan:
  - platform: binary
    name: "RelayFan"
    icon: 'mdi:fan'
    output: fan_output
    id: relay_fan_prihozka
    restore_mode: ALWAYS_OFF

# ============== Init DS18B20 & DHT11 (датчики температуры) ====================
one_wire:
  - platform: gpio
    pin: GPIO12

sensor:
  # DS18B20
  - platform: dallas_temp
    address: 0xca2d99bd0164ff28
    name: "Holl Temperature"
    id: sensor_holl_temp
    update_interval: 1s
    unit_of_measurement: "°C"
    icon: mdi:thermometer
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    on_value:
      then:
        - mqtt.publish:
            topic: tele/tas_house_2/SENSOR
            payload: !lambda |-
              char buffer[10];
              sprintf(buffer, "%.1f", x);  // Формат значения с одним знаком после запятой
              return buffer;
            qos: 0
            retain: true
  # DHT11
  - platform: dht
    pin: GPIO14
    id: dht11_dvor_sensor
    model: DHT11
    temperature:
      name: "Dvor Temperature"
      id: dvor_temp
      # filters:
      #   - lambda: return x - 4;
      unit_of_measurement: °C
    humidity:
      id: dvor_hum
      name: "Dvor Humidity"
      unit_of_measurement: '%'
    update_interval: 5s



# ======================== Ночники ===========================================
output:
  - platform: esp8266_pwm
    pin: GPIO13
    frequency: 1000 Hz
    id: pwm_output1

  - platform: esp8266_pwm
    pin: GPIO15
    frequency: 1000 Hz
    id: pwm_output2

  - id: fan_output
    platform: gpio
    pin:
      number: GPIO2
      inverted: false
      mode:
        output: true

  - id: light_output
    platform: gpio
    pin:
      number: GPIO0
      inverted: false
      mode:
        output: true

  - id: light_output1
    platform: gpio
    pin:
      number: GPIO4
      inverted: false
      mode:
        output: true


light:
  - platform: monochromatic
    output: pwm_output1
    name: "Ночник в прихожей"
    id: nochnik_prichozka
    icon: mdi:lightbulb-night
    restore_mode: RESTORE_DEFAULT_OFF 

  - platform: monochromatic
    output: pwm_output2
    id: nochnik_holl
    icon: mdi:lightbulb-night
    name: "Ночник в холле1"
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    name: Свет двор(прав)
    id: dvor_right_lamp
    output: light_output
    icon: mdi:light-flood-down
    restore_mode: ALWAYS_OFF

  - platform: binary
    name: Свет двор(лев)
    id: dvor_left_lamp
    output: light_output1
    icon: mdi:light-flood-down
    restore_mode: ALWAYS_OFF
# ================================================================================
# ============ Сенсор включения света во дворе по UDP ============================
binary_sensor:
  - platform: udp
    provider: switch-prihozka
    id: dvor_light_udp
    remote_id: binary_switch_1
    internal: true
    on_multi_click:
      # triple click (свет во дворе)
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - light.toggle: dvor_right_lamp
          - light.toggle: dvor_left_lamp
      # quad click  (вентиляция)
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - fan.toggle: relay_fan_prihozka
# =================================================================================

interval:
  # Автоматическое управление реле вентилятора по интервалам
  - interval: 1min  # Проверяем расписание каждую минуту
    then:
      - lambda: |-
          if (!id(auto_fantimer).state) {
            // Автоматический режим выключен, не делаем ничего
            return;
          }

          auto now = id(ntp_time).now();
          if (!now.is_valid()) return;

          bool should_run = false;

          // Функция для проверки одного интервала
          auto check_interval = [&](int start, int end) -> bool {
            if (start <= end) {
              return now.hour >= start && now.hour < end;
            } else {
              return now.hour >= start || now.hour < end;  // Интервал пересекает полночь
            }
          };

          // Проверка всех 5 интервалов
          should_run = check_interval((int)id(start_hour_1).state, (int)id(end_hour_1).state) ||
                       check_interval((int)id(start_hour_2).state, (int)id(end_hour_2).state) ||
                       check_interval((int)id(start_hour_3).state, (int)id(end_hour_3).state) ||
                       check_interval((int)id(start_hour_4).state, (int)id(end_hour_4).state) ||
                       check_interval((int)id(start_hour_5).state, (int)id(end_hour_5).state);

          // Управляем реле в зависимости от результата
          if (should_run) {
            id(relay_fan_prihozka).turn_on();
          } else {
            id(relay_fan_prihozka).turn_off();
          }

  # ==================  Пять временных интевалов работы вентиляции ===========================
number:
  - platform: template
    name: "Интервал 1: Начало (часы)"
    icon: mdi:timer-sand
    id: start_hour_1
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 1: Конец (часы)"
    icon: mdi:timer-sand-complete
    id: end_hour_1
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 2: Начало (часы)"
    icon: mdi:timer-sand
    id: start_hour_2
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 2: Конец (часы)"
    icon: mdi:timer-sand-complete
    id: end_hour_2
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 3: Начало (часы)"
    icon: mdi:timer-sand
    id: start_hour_3
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 3: Конец (часы)"
    icon: mdi:timer-sand-complete
    id: end_hour_3
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 4: Начало (часы)"
    icon: mdi:timer-sand
    id: start_hour_4
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 4: Конец (часы)"
    icon: mdi:timer-sand-complete
    id: end_hour_4
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 5: Начало (часы)"
    icon: mdi:timer-sand
    id: start_hour_5
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box

  - platform: template
    name: "Интервал 5: Конец (часы)"
    icon: mdi:timer-sand-complete
    id: end_hour_5
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    mode: box
  # =============================================================================================