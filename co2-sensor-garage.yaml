esphome:
  name: "co2-sensor-garage"
  friendly_name: CO2_Sensor

esp8266:
  board: nodemcuv2
  restore_from_flash: true
preferences:
  flash_write_interval: 60min
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "yd9jYCvW0L0QG9G+c7RwK9L5lod62mjgGa0TZIfPARM="

  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:
  platform: esphome
  password: "096ae24d59f1990fc2e41f4d9f0cce64"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"
  ap:
    ssid: "Garage Dangeres Hotspot"
    password: "00000000"

#mqtt:
#  broker: 192.168.1.1
#  port: 1883
# username:
# password:
  
captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

status_led:
  pin:
    number: D6
    inverted: False

binary_sensor:
  - platform: gpio
    id: warning_co
    pin:
      number: D3
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Warning CO input"

switch:
  - platform: template
    name: "Auto Fan"
    icon: "mdi:fan-auto"
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True
    id: auto_fan

sensor:
  - platform: adc
    pin: A0
    name: "CO concentration"
    device_class: CARBON_MONOXIDE
    accuracy_decimals: 1
    id: co_sensor
    update_interval: 5s
    filters:
      - lambda: return (x * 1024/5); // WITHOUT PROPER CALIBRATION YOU WILL NOT GET SERIOUS RESULTS
    unit_of_measurement: "ppm"
    icon: 'mdi:fire'
    on_value_range:
      - above: !lambda "return id(co_threshold).state;"
        then:
          if:
            condition:
              switch.is_on: auto_fan
            then:
              - fan.turn_on: relay_fan_garage
              - rtttl.play: 'smbdeath:d=4,o=5,b=90:32c6,32c6,32c6,8p,16b,16f6,16p,16f6,16f.6,16e.6,16d6,16c6,16p,16e,16p,16c'
      - below: !lambda "return id(co_threshold).state - id(hysteresis).state;"
        then:
          if:
            condition:
              switch.is_on: auto_fan
            then:
              - fan.turn_off: relay_fan_garage
  
  - platform: uptime
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

  - platform: dht
    pin: D4
    id: dht11_garage_sensor
    model: DHT11
    temperature:
      name: "Garage Temperature"
      filters:
        - lambda: return x - 4;
      unit_of_measurement: °C
    humidity:
      name: "Garage Humidity"
      unit_of_measurement: '% RH'
    update_interval: 5s

  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 60s

fan:
  - platform: binary
    name: "RelayFan"
    icon: 'mdi:fan'
    output: fan_output
    id: relay_fan_garage
    restore_mode: RESTORE_DEFAULT_OFF
#    availability:
#    state_topic: garage/fan_state_topic
#    command_topic: garage/fan_command_topic
#    command_retain: false

light:
  - platform: binary
    name: "Garage door Lamp"
    id: garage_door_lamp
    output: light_output
    icon: mdi:light-flood-down
    restore_mode: RESTORE_DEFAULT_OFF
#    availability:
#    state_topic: garage/doorlight_state_topic
#    command_topic: garage/doorlight_command_topic
#    command_retain: false

output:
  - platform: esp8266_pwm
    pin: D1
    id: rtttl_out

  - id: fan_output
    platform: gpio
    pin: D7

  - id: light_output
    platform: gpio
    pin: D8

rtttl:
  output: rtttl_out

number:
  - platform: template
    name: "Порог CO (ppm)"
    id: co_threshold
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    optimistic: true
    initial_value: 50
    restore_value: True
    device_class: CARBON_MONOXIDE

  - platform: template
    name: "Гистерезис"
    id: hysteresis
    min_value: 0
    max_value: 20
    step: 1
    mode: slider
    initial_value: 5
    restore_value: True
    optimistic: true

