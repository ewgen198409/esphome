esphome:
  name: "co2-sensor-garage"
  friendly_name: CO2_Sensor

esp8266:
  board: nodemcuv2
  restore_from_flash: true
preferences:
  flash_write_interval: 60min

logger:

# Enable Home Assistant API
api:
  # если отвалился api ha - ничего не делать
  reboot_timeout: 0s
  encryption:
    key: "yd9jYCvW0L0QG9G+c7RwK9L5lod62mjgGa0TZIfPARM="

  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:
  platform: esphome
  password: "096ae24d59f1990fc2e41f4d9f0cce64"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"
  ap:
    ssid: "Garage Dangeres Hotspot"
    password: "00000000"
  # если отвалился wifi - перезагружать каждый час
  reboot_timeout: 60min

external_components:
  source: github://ewgen198409/esphome/custom_components
  components: [mq]
  refresh: 0s

captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

status_led:
  pin:
    number: D6
    inverted: False

binary_sensor:
  - platform: gpio
    id: warning_co
    pin:
      number: D3
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Warning CO input"

switch:
  - platform: template
    name: "Авто режим вентиляции по CO"
    icon: mdi:fan-auto
    optimistic: true
    id: auto_mode_switch
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lambda: |-
          id(auto_mode) = true;

    turn_off_action:
      - lambda: |-
          id(auto_mode) = false;

sensor:
  # - platform: adc
  #   pin: A0
  #   name: "CO concentration"
  #   device_class: CARBON_MONOXIDE
  #   accuracy_decimals: 1
  #   id: co_sensor
  #   update_interval: 5s
  #   filters:
  #     - lambda: return (x * 1024/5); // WITHOUT PROPER CALIBRATION YOU WILL NOT GET SERIOUS RESULTS
  #   unit_of_measurement: "ppm"
  #   icon: 'mdi:fire'
  #   on_value_range:
  #     - above: !lambda "return id(co_threshold).state;"
  #       then:
  #         if:
  #           condition:
  #             switch.is_on: auto_fan
  #           then:
  #             - fan.turn_on: relay_fan_garage
  #             - rtttl.play: 'smbdeath:d=4,o=5,b=90:32c6,32c6,32c6,8p,16b,16f6,16p,16f6,16f.6,16e.6,16d6,16c6,16p,16e,16p,16c'
  #     - below: !lambda "return id(co_threshold).state - id(hysteresis).state;"
  #       then:
  #         if:
  #           condition:
  #             switch.is_on: auto_fan
  #           then:
  #             - fan.turn_off: relay_fan_garage
  
  - platform: uptime
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

  - platform: wifi_signal
    name: WiFi CO Garage
    update_interval: 60s
    id: wifi_signal_db

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Percent CO Garage"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  - platform: dht
    pin: D4
    id: dht11_garage_sensor
    model: DHT11
    temperature:
      name: "Garage Temperature"
      filters:
        - lambda: return x - 4;
      unit_of_measurement: °C
    humidity:
      name: "Garage Humidity"
      unit_of_measurement: '% RH'
    update_interval: 5s

  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 60s

  - platform: mq
    model: MQ7
    pin: A0
    update_interval: 2s
    sensor_lpg:
      name: Sensor LPG
    sensor_ch4:
      name: Sensor CH4
    sensor_co:
      name: Sensor CO
      id: co_sensor
    sensor_alcohol:
      name: Sensor Alcohol
    sensor_h2:
      name: Sensor H2

globals:
  - id: time_state
    type: int
  - id: upper_threshold
    type: float
    restore_value: true
    initial_value: '1.0'
  - id: lower_threshold
    type: float
    restore_value: true
    initial_value: '0.8'
  - id: auto_mode
    type: bool
    restore_value: true
    initial_value: 'true'  # Автоматический режим включён по умолчанию

# Логика автоматического управления вентилятором
interval:
  - interval: 10s
    then:
    # Скрипт автоматического управления вентилятором по влажности
      - if:
          condition:
            lambda: 'return id(auto_mode);'  # Проверка: включён ли автоматический режим
          then:
            - lambda: |-
                float CO = id(co_sensor).state;
                if (CO > id(upper_threshold)) {
                  id(relay_fan_garage).turn_on();
                } else if (CO < id(lower_threshold)) {
                  id(relay_fan_garage).turn_off();
                }
fan:
  - platform: binary
    name: "RelayFan"
    icon: 'mdi:fan'
    output: fan_output
    id: relay_fan_garage
    restore_mode: RESTORE_DEFAULT_OFF
#    availability:
#    state_topic: garage/fan_state_topic
#    command_topic: garage/fan_command_topic
#    command_retain: false

light:
  - platform: binary
    name: "Garage door Lamp"
    id: garage_door_lamp
    output: light_output
    icon: mdi:light-flood-down
    restore_mode: RESTORE_DEFAULT_OFF
#    availability:
#    state_topic: garage/doorlight_state_topic
#    command_topic: garage/doorlight_command_topic
#    command_retain: false

output:
  - platform: esp8266_pwm
    pin: D1
    id: rtttl_out

  - id: fan_output
    platform: gpio
    pin: D7

  - id: light_output
    platform: gpio
    pin: D8

rtttl:
  output: rtttl_out

# Слайдеры для настройки порогов в Home Assistant
number:
  - platform: template
    name: "Верхний порог CO"
    icon: mdi:waves-arrow-right
    min_value: 0.0
    max_value: 1.0
    step: 0.1
    optimistic: true
    id: upper_threshold_number
    initial_value: 1.0
    restore_value: true
    set_action:
      - lambda: |-
          id(upper_threshold) = x;

  - platform: template
    name: "Нижний порог CO"
    icon: mdi:waves-arrow-left
    min_value: 0.0
    max_value: 1.0
    step: 0.1
    optimistic: true
    id: lower_threshold_number
    initial_value: 0.8
    restore_value: true
    set_action:
      - lambda: |-
          id(lower_threshold) = x;

