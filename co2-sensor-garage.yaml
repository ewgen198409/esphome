esphome:
  name: "co2-sensor-garage"

esp8266:
  board: nodemcuv2
  restore_from_flash: true
preferences:
  flash_write_interval: 1min

logger:

# Enable Home Assistant API
api:
  # если отвалился api ha - ничего не делать
  reboot_timeout: 0s
  encryption:
    key: "yd9jYCvW0L0QG9G+c7RwK9L5lod62mjgGa0TZIfPARM="

  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:
  platform: esphome
  password: "096ae24d59f1990fc2e41f4d9f0cce64"


udp:
  id: udp_hub

packet_transport:
  - platform: udp
    sensors:
      - garage_temp
      - co_concentration
      - co_percentage
      - garage_hum
    binary_sensors:
      - fan_state_sensor
      - lamp_state_sensor      # Добавьте эту строку


wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"
  ap:
    ssid: "Garage Dangeres Hotspot"
    password: "00000000"
  # если отвалился wifi - перезагружать каждый час
  reboot_timeout: 60min

# external_components:
#   source: github://ewgen198409/esphome/components
#   components: [mq]
#   refresh: 0s

captive_portal:

button:
  - platform: restart
    name: Restart

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

status_led:
  pin:
    number: D6
    inverted: False

binary_sensor:
  - platform: gpio
    id: warning_co
    pin:
      number: D3
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Warning CO input"

  - platform: packet_transport
    provider: pcf8574
    remote_id: fan_state_trigger  # Принимаем состояние от pcf8574
    id: fan_state_receiver
    name: "Fan State Receiver"
    internal: true
    on_state:
      then:
        - if:
            condition:
              lambda: 'return x;'
            then:
              - fan.turn_on: relay_fan_garage
            else:
              - fan.turn_off: relay_fan_garage

  - platform: template
    id: fan_state_sensor
    name: "Fan State Sensor"
    internal: true
    lambda: |-
      return id(relay_fan_garage).state;
      
  # Приемник для управления лампой
  - platform: packet_transport
    provider: pcf8574
    remote_id: lamp_control_trigger
    id: lamp_control_receiver
    name: "Lamp Control Receiver"
    internal: true
    on_state:
      then:
        - if:
            condition:
              lambda: 'return x;'
            then:
              - light.turn_on: garage_door_lamp
            else:
              - light.turn_off: garage_door_lamp

  # Сенсор состояния лампы для публикации
  - platform: template
    id: lamp_state_sensor
    name: "Lamp State Sensor"
    internal: true
    lambda: |-
      return id(garage_door_lamp).current_values.is_on();
      
      
switch:
  - platform: template
    name: "Авто режим вентиляции по CO"
    icon: mdi:fan-auto
    optimistic: true
    id: auto_mode_switch
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - lambda: |-
          id(auto_mode) = true;

    turn_off_action:
      - lambda: |-
          id(auto_mode) = false;

sensor:
  - platform: uptime
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

  - platform: wifi_signal
    name: WiFi CO Garage
    update_interval: 60s
    id: wifi_signal_db

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Percent CO Garage"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  - platform: dht
    pin: D4
    id: dht11_garage_sensor
    model: DHT11
    temperature:
      name: "Garage Temperature"
      id: garage_temp
      filters:
        - lambda: return x - 4;
      unit_of_measurement: °C
      accuracy_decimals: 1
    humidity:
      id: garage_hum
      name: "Garage Humidity"
      unit_of_measurement: '% RH'
      accuracy_decimals: 1
    update_interval: 60s

  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 60s

  - platform: adc
    pin: A0
    name: "MQ7 FC-22 Raw Value"
    id: mq7_raw
    update_interval: 20s
    accuracy_decimals: 3
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5

  # Напряжение с модуля FC-22
  - platform: template
    name: "MQ7 FC-22 Voltage"
    id: mq7_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 3
    lambda: |-
      return id(mq7_raw).state * 3.3;
    update_interval: 20s

  # Концентрация CO для модуля FC-22
  - platform: template
    name: "CO Concentration"
    id: co_concentration
    unit_of_measurement: "ppm"
    accuracy_decimals: 1
    lambda: |-
      return (id(mq7_voltage).state*1024/5);
    update_interval: 30s

  # Процентное соотношение концентрации CO
  - platform: template
    name: "CO Percentage"
    id: co_percentage
    unit_of_measurement: "%"
    accuracy_decimals: 3
    lambda: |-
      float co_ppm = id(co_concentration).state;
      
      // Преобразуем ppm в проценты
      // 1% = 10,000 ppm
      float co_percent = co_ppm / 10000.0;
      
      // Ограничиваем диапазон
      if (co_percent < 0) co_percent = 0;
      if (co_percent > 100) co_percent = 100;
      
      return co_percent;
    update_interval: 30s

  # - platform: mq
  #   model: MQ7
  #   pin: A0
  #   update_interval: 2s
  #   sensor_lpg:
  #     name: Sensor LPG
  #   sensor_ch4:
  #     name: Sensor CH4
  #   sensor_co:
  #     name: Sensor CO
  #     id: co_sensor
  #   sensor_alcohol:
  #     name: Sensor Alcohol
  #   sensor_h2:
  #     name: Sensor H2

globals:
  - id: upper_threshold
    type: float
    restore_value: true
    initial_value: '1.5'
  - id: lower_threshold
    type: float
    restore_value: true
    initial_value: '1.0'
  - id: auto_mode
    type: bool
    restore_value: true
    initial_value: 'true'  # Автоматический режим включён по умолчанию

time:
  - platform: sntp
    id: homeassistant_time
    timezone: Asia/Omsk
    servers:
      - 0.openwrt.pool.ntp.org
      - 1.openwrt.pool.ntp.org
      - 2.openwrt.pool.ntp.org

# Логика автоматического управления вентилятором
interval:
  - interval: 10s
    then:
    # Скрипт автоматического управления вентилятором по влажности
      - if:
          condition:
            lambda: 'return id(auto_mode);'  # Проверка: включён ли автоматический режим
          then:
            - lambda: |-
                float co = id(co_percentage).state;
                if (co > id(upper_threshold)) {
                  auto call = id(relay_fan_garage).turn_on();
                  call.perform();
                } else if (co < id(lower_threshold)) {
                  auto call = id(relay_fan_garage).turn_off();
                  call.perform();
                }

fan:
  - platform: binary
    name: "RelayFan"
    icon: 'mdi:fan'
    output: fan_output
    id: relay_fan_garage
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - rtttl.play: 'scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b'

light:
  - platform: binary
    name: "Garage door Lamp"
    id: garage_door_lamp
    output: light_output
    icon: mdi:light-flood-down
    restore_mode: ALWAYS_OFF

output:
  - platform: esp8266_pwm
    pin: D1
    id: rtttl_out

  - id: fan_output
    platform: gpio
    pin: D7

  - id: light_output
    platform: gpio
    pin: D8

rtttl:
  output: rtttl_out

# Слайдеры для настройки порогов в Home Assistant
number:
  - platform: template
    name: "Верхний порог CO"
    icon: mdi:waves-arrow-right
    min_value: 0.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    id: upper_threshold_number
    initial_value: 1.5
    restore_value: true
    set_action:
      - lambda: |-
          id(upper_threshold) = x;

  - platform: template
    name: "Нижний порог CO"
    icon: mdi:waves-arrow-left
    min_value: 0.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    id: lower_threshold_number
    initial_value: 1.0
    restore_value: true
    set_action:
      - lambda: |-
          id(lower_threshold) = x;

