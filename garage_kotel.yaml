esphome:
  name: garage-kotel

bk72xx:
  board: generic-bk7231t-qfn32-tuya

api:
  encryption:
    key: "A+xLM79G2f7hVt1VqNu2u090EHyfxqGEUhjZ1ZYKH9I="
  reboot_timeout: 1800s

ota:
  platform: esphome

udp:
logger:
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: OpenWrt_Garage
      password: "9514210798"
      manual_ip:
        static_ip: 192.168.1.216
        gateway: 192.168.1.1
        subnet: 255.255.255.0
        dns1: 77.88.8.8

  use_address: 192.168.1.216
  ap:
    ssid: "Garage Kotel Hotspot"
    password: "00000000"

time:

  # - platform: sntp
  #   id: ntp_time
  #   timezone: Asia/Omsk
  #   servers:
  #     - 0.openwrt.pool.ntp.org
  #     - 1.openwrt.pool.ntp.org
  #     - 2.openwrt.pool.ntp.org

  - platform: homeassistant
    id: homeassistant_time

#     on_time: 
#       - hours: 7-9,17-20    # 7-10, 17-21 ПИК
#         minutes: 0-59
#         seconds: 0
#         then:
#           lambda: |-
#             if ((id(switch_peack_off)) && (id(thermostat_garage_kotel).mode == 'HEAT') && (id(homeassistant_time).now().is_valid())){
#               auto call = id(thermostat_garage_kotel).make_call();
#               call.set_mode("OFF");
#               call.perform();
#             }
#       - hours: 10-16,21-23,0-6   # ДЕНЬ, НОЧЬ
#         minutes: 0-59
#         seconds: 0
#         then:
#           lambda: |- 
#             if ((id(switch_peack_off)) && (id(thermostat_garage_kotel).mode == 'OFF') && (id(homeassistant_time).now().is_valid())){
#               auto call = id(thermostat_garage_kotel).make_call();
#               call.set_mode("HEAT");
#               call.perform();
#             }
button:
  - platform: restart
    name: Restart

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

  # Сенсор времени ESPHOME
  - platform: template
    name: "Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %X", localtime(&currTime));
      return  { str };
    update_interval: 60s

sensor:
  - platform: uptime
    name: Uptime

  - platform: udp
    provider: co2-sensor-garage
    remote_id: garage_temp
    id: garage_temp
    internal: true

  - platform: udp
    provider: co2-sensor-garage
    remote_id: garage_hum
    id: garage_hum
    internal: true

# ================== Счетик времени включенного котла =======================
  - platform: duty_time
    id: kotel_work_time
    name: Время работы котла
    icon: mdi:alarm-plus
    update_interval: 10s
    accuracy_decimals: 0
    device_class: duration
    lambda: "return id(switch_1).state;"
    restore: true
    last_time:
      name: Kotel посл. время работы
# ===================================================================================
  - platform: wifi_signal
    name: WiFi Strength ${device_name}
    update_interval: 60s
    id: wifi_signal_db

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

binary_sensor:
  - platform: gpio
    id: binary_switch_1
    pin:
      number: P6
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        - switch.toggle: switch_1

switch:
  - platform: gpio
    id: switch_1
    name: Relay 1
    pin: P24

  # Выключатель отпления в пиковую зону
  - platform: template
    name: "Не включать в ПИК"
    optimistic: true
    icon: mdi:clock
    id: switch_peack_off
    restore_mode: RESTORE_DEFAULT_ON

status_led:
  pin:
    number: P7
    inverted: true

climate:
  - platform: thermostat
    id: thermostat_garage_kotel
    name: "Thermostat Garage Kotel"
    visual:
      min_temperature: 5
      max_temperature: 25
      temperature_step:
        target_temperature: 1.0
        current_temperature: 0.1
    sensor: garage_temp
    humidity_sensor: garage_hum
    min_heating_off_time: 10s
    min_heating_run_time: 10s
    min_idle_time: 10s
    heat_deadband: 1.0
    heat_overrun: 0.0
    heat_action:
      - switch.turn_on: switch_1
    idle_action:
      - switch.turn_off: switch_1