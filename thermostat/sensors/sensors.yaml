sensor:
  - platform: rotary_encoder
    id: encoder_rotary
    name: "stehlampe Rotary"
    pin_a:
      number: GPIO32
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO33
      mode:
        input: true
        pullup: true
    internal: true
    filters:
      debounce: 30ms
    on_clockwise:
      - lambda: id(back_to_screensaver).execute();
      - if:
          condition:
            - lambda: |-
                  return id(back_light).current_values.get_brightness() <= ${backlight} + 0.05;
          then:
            - lvgl.widget.show: status_bar
            - lvgl.page.show: page_one
            - delay: 0.5s
            - lvgl.slider.update:
                id: slider_light
                value: !lambda return id(set_brghtness);
            - script.execute: back_to_screensaver

    on_anticlockwise:
      - lambda: id(back_to_screensaver).execute();
      - if:
          condition:
            - lambda: |-
                  return id(back_light).current_values.get_brightness() <= ${backlight} + 0.05;
          then:
            - lvgl.widget.show: status_bar
            - lvgl.page.show: page_one
            - delay: 0.5s
            - lvgl.slider.update:
                id: slider_light
                value: !lambda return id(set_brghtness);
            - script.execute: back_to_screensaver
              
  # - platform: udp
  #   provider: co2-sensor-garage
  #   remote_id: garage_temp
  #   id: garage_temp
  #   internal: true


  - platform: ntc
    sensor: resistance_sensor
    id: ntc_temp
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 30kOhm
    name: NTC Temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    on_value:
      - lvgl.label.update:
          id: lbl_testtemp
          text:
            format: "\U000F0F55 %.1f°c"
            args: [ 'x' ]

      - lvgl.label.update:
          id: lbl_outemp
          text:
            format: "\U000F0F55 %.1f°c"
            args: [ 'x' ]

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    configuration: UPSTREAM
    resistor: 10kOhm
    reference_voltage: 3.3v
    name: Resistance Sensor

  - platform: adc
    id: source_sensor
    name: ADC NTC
    pin: GPIO35
    attenuation: auto
    update_interval: 5s

  - platform: wifi_signal
    name: WiFi Thermostat
    update_interval: 60s
    id: wifi_signal_db

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Percent Thermostat"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  # "Sonoff THS01 - SI7021"
  - platform: htu21d
    model: SI7021
    temperature:
      name: "SI7021 Temperature"
      id: sens_temp
      on_value:
        - lvgl.label.update:
            id: lbl_temp1
            text:
              format: "\U000F050F: %.1f°"
              args: [ 'id(sens_temp).state' ]
    humidity:
      name: "SI7021 Humidity"
      id: sens_humi
      on_value:
        - lvgl.label.update:
            id: lbl_hum1
            text:
              format: "\U000F0E0A: %.0f%%"
              args: [ 'id(sens_humi).state' ]
    update_interval: 5s

  # Сенсоры погоды получены из HA
  - platform: homeassistant
    id: weather_temp
    entity_id: weather.home_weather
    attribute: temperature
    internal: true
    on_value:
      - lvgl.label.update:
          id: lbl_tempweather
          text:
            format: "Temp: %.0f°c"
            args: [ 'id(weather_temp).state' ]

  - platform: homeassistant
    id: veter_speed
    entity_id: weather.home_weather
    attribute: wind_speed
    internal: true
    on_value:
      - lvgl.label.update:
          id: lbl_windweather
          text:
            format: "Wind: %.0fkm/h"
            args: [ 'id(veter_speed).state' ]

  - platform: homeassistant
    id: humidity
    entity_id: weather.home_weather
    attribute: humidity
    internal: true
    on_value:
      - lvgl.label.update:
          id: lbl_humweather
          text:
            format: "Hum: %.0f%%"
            args: [ 'id(humidity).state' ]

  - platform: homeassistant
    id: icon_weather
    entity_id: sensor.today_icon
    internal: true
    on_value:
      then:
        - lambda: |-
            if (x == 3.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0599");   // mdi:weather-sunny
            } else if (x == 1.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0594");   // mdi:weather-night
            } else if (x == 2.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0590");    // mdi:weather-cloudy
            } else if (x == 13.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F067E");   // mdi:weather-lightning-rainy
            } else if (x == 8.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0595");  // mdi:weather-partly-cloudy
            } else if (x == 9.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0597");  // mdi:weather-rainy
            } else if (x == 11.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F0F36");  // mdi:weather-snowy-heavy
            } else if (x == 14.0f) {
              lv_label_set_text(id(lbl_iconweather), "\U000F059D");   // mdi:weather-windy
            } else {
              lv_label_set_text(id(lbl_iconweather), "\U000F0595");    // mdi:weather-partly-cloudy
            }
   # ===========================================================================


binary_sensor: # Button encoder
  - platform: gpio
    pin:
      number: GPIO25
      mode: INPUT_PULLUP
      inverted: true
    id: enc_switch
    name: "Encoder button"
    internal: true
    filters:
      - delayed_off: 50ms
      - delayed_on: 50ms

  - platform: status
    name: "Thermostat Status"



text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID


